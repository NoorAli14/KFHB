{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/views/forgot-password/forgot-password.component.ts","webpack:///src/app/auth/views/forgot-password/forgot-password.component.html","webpack:///src/app/auth/views/invitation/invitation.component.ts","webpack:///src/app/auth/views/invitation/invitation.component.html","webpack:///src/app/auth/views/login/login.component.ts","webpack:///src/app/auth/views/login/login.component.html","webpack:///src/app/auth/views/phone-verification/phone-verification.component.ts","webpack:///src/app/auth/views/phone-verification/phone-verification.component.html","webpack:///src/app/auth/views/reset-password/reset-password.component.ts","webpack:///src/app/auth/views/reset-password/reset-password.component.html","webpack:///src/app/shared/modules/material-forms/material-forms.module.ts"],"names":["routes","path","pathMatch","redirectTo","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","ForgotPasswordComponent","_fuseConfigService","_authService","injector","config","layout","navbar","hidden","toolbar","footer","sidepanel","forgotPasswordForm","email","required","forgotPassword","value","pipe","_unsubscribeAll","subscribe","response","errorType","responseMessage","PASSWORD_RESET_SENT","onSubmit","selector","templateUrl","styleUrls","encapsulation","None","animations","InvitationComponent","activatedRoute","nationalityList","genderList","token","snapshot","paramMap","get","invitationForm","id","firstName","middleName","lastName","contactNo","numbersOnly","gender","status","disabled","dateOfBirth","nationalityId","password","confirmPassword","confirmPasswordValidator","bind","getUserByToken","control","controls","passwordNotMatch","model","Date","toLocaleDateString","updateInvitation","UPDATED","error","UNKNOWN","user","patchValue","statusCode","INVALID_INVITATION","LoginComponent","route","router","returnUrl","queryParamMap","loginForm","login","LOGGED_IN","setTimeout","navigateByUrl","INVALID_CREDENTIAL","PhoneVerificationComponent","_formBuilder","recoverPasswordForm","code","minLength","maxLength","passwordMatcher","console","log","ResetPasswordComponent","getEmailTokenStatus","resetPasswordForm","passwordConfirm","resetPassword","PASSWORD_UPDATED","getTokenStatus","INVALID_RESET_TOKEN","MaterialFormsModule"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { LoginComponent } from \"./views/login/login.component\";\r\nimport { ResetPasswordComponent } from \"./views/reset-password/reset-password.component\";\r\nimport { ForgotPasswordComponent } from \"./views/forgot-password/forgot-password.component\";\r\nimport { PhoneVerificationComponent } from \"./views/phone-verification/phone-verification.component\";\r\nimport { InvitationComponent } from './views/invitation/invitation.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: \"\",\r\n        pathMatch: \"full\",\r\n        redirectTo: \"login\",\r\n    },\r\n    {\r\n        path: \"login\",\r\n        component: LoginComponent,\r\n    },\r\n    {\r\n        path: \"verification\",\r\n        component: PhoneVerificationComponent,\r\n    },\r\n\r\n    {\r\n        path: \"reset-password/:token\",\r\n        component: ResetPasswordComponent,\r\n    },\r\n    {\r\n        path: \"forgot-password\",\r\n        component: ForgotPasswordComponent,\r\n    },\r\n    {\r\n        path: \"verification\",\r\n        component: PhoneVerificationComponent,\r\n    },\r\n    {\r\n        path: \"invitation/:token\",\r\n        component: InvitationComponent,\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { AuthRoutingModule } from \"./auth-routing.module\";\r\nimport { LoginComponent } from \"./views/login/login.component\";\r\nimport { FuseSharedModule } from \"@fuse/shared.module\";\r\nimport { ForgotPasswordComponent } from './views/forgot-password/forgot-password.component';\r\nimport { ResetPasswordComponent } from './views/reset-password/reset-password.component';\r\nimport { MaterialFormsModule } from '@shared/modules/material-forms/material-forms.module';\r\n\r\nimport { PhoneVerificationComponent } from './views/phone-verification/phone-verification.component';\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { InvitationComponent } from './views/invitation/invitation.component';\r\n\r\n@NgModule({\r\n    declarations: [LoginComponent,  ForgotPasswordComponent, ResetPasswordComponent, PhoneVerificationComponent, InvitationComponent],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialFormsModule,\r\n        FuseSharedModule,\r\n        SharedModule,\r\n        AuthRoutingModule\r\n    ],\r\n})\r\nexport class AuthModule {}\r\n","import { AuthenticationService } from \"@shared/services/auth/authentication.service\";\r\nimport { Component, OnInit, ViewEncapsulation, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\n\r\nimport { FuseConfigService } from \"@fuse/services/config.service\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { BaseComponent } from '@shared/components/base/base.component';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MESSAGES } from '@shared/constants/messages.constant';\r\n\r\n@Component({\r\n    selector: \"forgot-password\",\r\n    templateUrl: \"./forgot-password.component.html\",\r\n    styleUrls: [\"./forgot-password.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class ForgotPasswordComponent extends BaseComponent implements OnInit {\r\n    \r\n    \r\n    forgotPasswordForm: FormGroup;\r\n    constructor(\r\n        private _fuseConfigService: FuseConfigService,\r\n        private _authService: AuthenticationService,\r\n        injector: Injector\r\n        ) {\r\n            super(injector);\r\n        // Configure the layout\r\n        this._fuseConfigService.config = {\r\n            layout: {\r\n                navbar: {\r\n                    hidden: true,\r\n                },\r\n                toolbar: {\r\n                    hidden: true,\r\n                },\r\n                footer: {\r\n                    hidden: true,\r\n                },\r\n                sidepanel: {\r\n                    hidden: true,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.forgotPasswordForm = new FormGroup({\r\n            email: new FormControl(\"\", [Validators.required, Validators.email]),\r\n        });\r\n    }\r\n    onSubmit() {\r\n        this._authService\r\n            .forgotPassword(this.forgotPasswordForm.value).pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                     this.errorType = \"success\";\r\n                     this.responseMessage = MESSAGES.PASSWORD_RESET_SENT();\r\n                },\r\n               (response=>super.onError(response))\r\n            );\r\n    }\r\n}\r\n","<div class=\"auth-container\" fxLayout=\"column\">\r\n    <div\r\n        class=\"auth-form-wrapper\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n    >\r\n        <div\r\n            class=\"auth-form\"\r\n            [@animate]=\"{\r\n                value: '*',\r\n                params: { duration: '300ms', y: '100px' }\r\n            }\"\r\n        >\r\n            <div class=\"logo\">\r\n                <img src=\"assets/images/logos/fuse.svg\" />\r\n            </div>\r\n\r\n            <div class=\"title\">RECOVER YOUR PASSWORD</div>\r\n            <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n        <br>\r\n            <form\r\n                name=\"forgotPasswordForm\"\r\n                [formGroup]=\"forgotPasswordForm\"\r\n                (ngSubmit)=\"onSubmit()\"\r\n                novalidate\r\n            >\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Email  <app-required-indicator></app-required-indicator></mat-label>\r\n                    <input matInput formControlName=\"email\" />\r\n                    <mat-icon matSuffix class=\"secondary-text\">mail</mat-icon>\r\n                     <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"forgotPasswordForm.get('email')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                </mat-form-field>\r\n\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <!-- <a class=\"link\" mat-button color=\"accent\" [routerLink]=\"'/auth/verification'\">Try another way</a> -->\r\n\r\n                 <button type=\"submit\"  mat-raised-button class=\"submit-button\" color=\"accent\"\r\n                        aria-label=\"SEND RESET LINK\" [disabled]=\"forgotPasswordForm.invalid\">\r\n                    SEND RESET LINK\r\n                </button>\r\n                </div>\r\n            </form>\r\n\r\n            <div class=\"login\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <a\r\n                    class=\"link\"\r\n                    mat-button\r\n                    color=\"warn\"\r\n                    [routerLink]=\"'/auth/login'\"\r\n                    >Go back to login</a\r\n                >\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Injector } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { User } from \"@feature/entitlement/models/user.model\";\r\nimport { NATIONALITY_LIST, GENDER_LIST } from \"@shared/constants/app.constants\";\r\nimport { AuthenticationService } from \"@shared/services/auth/authentication.service\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { FuseConfigService } from \"@fuse/services/config.service\";\r\nimport { BaseComponent } from \"@shared/components/base/base.component\";\r\nimport {\r\n    snakeToCamelObject,\r\n    camelToSnakeCase,\r\n} from \"@shared/helpers/global.helper\";\r\nimport { ValidatorService } from \"@shared/services/validator-service/validator.service\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { MESSAGES } from \"@shared/constants/messages.constant\";\r\n\r\n@Component({\r\n    selector: \"app-invitation\",\r\n    templateUrl: \"./invitation.component.html\",\r\n    styleUrls: [\"./invitation.component.scss\"],\r\n    animations: fuseAnimations,\r\n})\r\nexport class InvitationComponent extends BaseComponent implements OnInit {\r\n    invitationForm: FormGroup;\r\n\r\n    response: User;\r\n    nationalityList: any[]=[];\r\n    genderList: any[] = GENDER_LIST;\r\n    token: string;\r\n    constructor(\r\n        private _authService: AuthenticationService,\r\n        private _fuseConfigService: FuseConfigService,\r\n        private activatedRoute: ActivatedRoute,\r\n        injector: Injector\r\n    ) {\r\n        super(injector);\r\n        this.token = this.activatedRoute.snapshot.paramMap.get(\"token\");\r\n\r\n        // Configure the layout\r\n        this._fuseConfigService.config = {\r\n            layout: {\r\n                navbar: {\r\n                    hidden: true,\r\n                },\r\n                toolbar: {\r\n                    hidden: true,\r\n                },\r\n                footer: {\r\n                    hidden: true,\r\n                },\r\n                sidepanel: {\r\n                    hidden: true,\r\n                },\r\n            },\r\n        };\r\n    }\r\n    ngOnInit(): void {\r\n        this.invitationForm = new FormGroup({\r\n            id: new FormControl(),\r\n            firstName: new FormControl(\"\", [Validators.required]),\r\n            middleName: new FormControl(),\r\n            lastName: new FormControl(\"\", [Validators.required]),\r\n            contactNo: new FormControl(\"\", [\r\n                Validators.required,\r\n                ValidatorService.numbersOnly,\r\n            ]),\r\n            gender: new FormControl(\"\", [Validators.required]),\r\n            status: new FormControl(\"\"),\r\n            email: new FormControl({ value: \"\", disabled: true }),\r\n            dateOfBirth: new FormControl(\"\", [Validators.required]),\r\n            nationalityId: new FormControl(\"\", [Validators.required]),\r\n            password: new FormControl(\"\", Validators.required),\r\n            confirmPassword: new FormControl(\"\", [\r\n                Validators.required,\r\n                this.confirmPasswordValidator.bind(this),\r\n            ]),\r\n        });\r\n        this.getUserByToken(this.token);\r\n    }\r\n    confirmPasswordValidator(control: FormControl): { [s: string]: boolean } {\r\n        if (\r\n            this.invitationForm &&\r\n            control.value !== this.invitationForm.controls.password.value\r\n        ) {\r\n            return { passwordNotMatch: true };\r\n        }\r\n        return null;\r\n    }\r\n    onSubmit() {\r\n        let model = { ...this.invitationForm.value };\r\n        model.dateOfBirth = new Date(model.dateOfBirth).toLocaleDateString();\r\n        model = camelToSnakeCase(model);\r\n        this._authService\r\n            .updateInvitation(model, this.token)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    this.errorType = \"success\";\r\n                    this.responseMessage = MESSAGES.UPDATED(\"Your Profile\");\r\n                    // setTimeout(() => {\r\n                    //     this.router.navigateByUrl('/auth/login');\r\n                    // }, 1000);\r\n                },\r\n                (error) => {\r\n                    this.errorType = \"error\";\r\n                    this.responseMessage = MESSAGES.UNKNOWN();\r\n                }\r\n            );\r\n    }\r\n    getUserByToken(token) {\r\n        this._authService\r\n            .getUserByToken(token)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    const user = snakeToCamelObject(response[0]);\r\n                    this.invitationForm.patchValue(user);\r\n                    this.nationalityList= response[1];\r\n                },\r\n                ({ error }) => {\r\n                    this.errorType = \"error\";\r\n                    if (error.statusCode === 404) {\r\n                        this.errorType = \"warning\";\r\n                        this.responseMessage = MESSAGES.INVALID_INVITATION();\r\n                    } else {\r\n                        this.responseMessage = MESSAGES.UNKNOWN();\r\n                    }\r\n                }\r\n            );\r\n    }\r\n}\r\n","<div class=\"auth-container\" fxLayout=\"column\">\r\n    <div\r\n        class=\"auth-form-wrapper\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n    >\r\n        <div\r\n            class=\"invitation-form\"\r\n            [@animate]=\"{\r\n                value: '*',\r\n                params: { duration: '300ms', y: '100px' }\r\n            }\"\r\n        >\r\n        <div class=\"title\">UPDATE YOUR PROFILE</div>\r\n            <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n            <div fxLayout=\"row\">\r\n                <form\r\n                    class=\"p-24\"\r\n                    fxLayout=\"column\"\r\n                    fxLayoutAlign=\"start\"\r\n                    fxFlex=\"1 0\"\r\n                    name=\"userForm\"\r\n                    (ngSubmit)=\"onSubmit()\"\r\n                    novalidate\r\n                    [formGroup]=\"invitationForm\"\r\n                >\r\n                    <div\r\n                        fxLayout=\"row wrap\"\r\n                        fxLayout.lt-lg=\"column\"\r\n                        fxLayoutAlign.lt-lg=\"center\"\r\n                        fxLayoutGap=\"10px\"\r\n                        fxLayoutAlign=\"start center\"\r\n                        fxFlex=\"1 1 auto\"\r\n                    >\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>First Name <app-required-indicator></app-required-indicator></mat-label>\r\n                            <input matInput formControlName=\"firstName\" />\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >account_circle</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('firstName')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>Middle Name</mat-label>\r\n                            <input matInput formControlName=\"middleName\" />\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >account_circle</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('middleName')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>Last Name <app-required-indicator></app-required-indicator></mat-label>\r\n                            <input matInput formControlName=\"lastName\" />\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >account_circle</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('lastName')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>Email</mat-label>\r\n                            <input matInput  formControlName=\"email\" />\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >email</mat-icon\r\n                            >\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>Date of Birth <app-required-indicator></app-required-indicator></mat-label>\r\n                            <input\r\n                                matInput\r\n                                [matDatepicker]=\"picker\"\r\n                                formControlName=\"dateOfBirth\"\r\n                            />\r\n                            <mat-datepicker-toggle\r\n                                matSuffix\r\n                                [for]=\"picker\"\r\n                            ></mat-datepicker-toggle>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                            <!-- <mat-icon matSuffix class=\"secondary-text\">vpn_key</mat-icon> -->\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('dateOfBirth')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pr-4\"\r\n                        >\r\n                            <mat-label>Gender <app-required-indicator></app-required-indicator></mat-label>\r\n                            <mat-select formControlName=\"gender\">\r\n                                <mat-option\r\n                                    *ngFor=\"let item of genderList\"\r\n                                    [value]=\"item.id\"\r\n                                >\r\n                                    {{ item.name }}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >face</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('gender')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pr-4\"\r\n                        >\r\n                            <mat-label>Nationality <app-required-indicator></app-required-indicator></mat-label>\r\n                            <mat-select formControlName=\"nationalityId\">\r\n                                <mat-option\r\n                                    *ngFor=\"let item of nationalityList\"\r\n                                    [value]=\"item.id\"\r\n                                >\r\n                                    {{ item.nationality }}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >outlined_flag</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('nationalityId')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>Contact No <app-required-indicator></app-required-indicator></mat-label>\r\n                            <input matInput formControlName=\"contactNo\" />\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >phone</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('contactNo')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                            appearance=\"outline\"\r\n                            fxFlex=\"48\"\r\n                            class=\"pl-4\"\r\n                        >\r\n                            <mat-label>Password <app-required-indicator></app-required-indicator></mat-label>\r\n                            <input type=\"password\" matInput formControlName=\"password\" />\r\n                            <mat-icon matSuffix class=\"secondary-text\"\r\n                                >account_circle</mat-icon\r\n                            >\r\n                            <mat-error>\r\n                                <app-mat-error\r\n                                    [control]=\"invitationForm.get('password')\"\r\n                                ></app-mat-error>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Confirm Password <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input type=\"password\" matInput formControlName=\"confirmPassword\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"invitationForm.get('confirmPassword')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    </div>\r\n\r\n                    <div\r\n                        class=\"actions\"\r\n                        fxLayoutGap=\"10px\"\r\n                        fxLayout=\"row\"\r\n                        fxLayoutAlign=\"center center\"\r\n                    >\r\n                        <button\r\n                            type=\"button\"\r\n                            mat-raised-button\r\n                            color=\"accent\"\r\n                            [routerLink]=\"'/auth/login'\"\r\n                        >\r\n                            Back\r\n                        </button>\r\n                        &nbsp;&nbsp;\r\n                        <button\r\n                        class=\"post-button\"\r\n                            type=\"submit\"\r\n                            [disabled]=\"invitationForm.invalid\"\r\n                            mat-raised-button\r\n                            color=\"accent\"\r\n                            aria-label=\"Send Message\"\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Component, OnInit, ViewEncapsulation, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\n\r\nimport { FuseConfigService } from \"@fuse/services/config.service\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { AuthenticationService } from \"@shared/services/auth/authentication.service\";\r\nimport { BaseComponent } from \"@shared/components/base/base.component\";\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MESSAGES } from '@shared/constants/messages.constant';\r\n\r\n@Component({\r\n    selector: \"app-login\",\r\n    templateUrl: \"./login.component.html\",\r\n    styleUrls: [\"./login.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class LoginComponent extends BaseComponent implements OnInit {\r\n    loginForm: FormGroup;\r\n    returnUrl: string;\r\n\r\n    constructor(\r\n        private _fuseConfigService: FuseConfigService,\r\n        private _authService: AuthenticationService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        injector: Injector\r\n    ) {\r\n        super(injector);\r\n        this._fuseConfigService.config = {\r\n            layout: {\r\n                navbar: {\r\n                    hidden: true,\r\n                },\r\n                toolbar: {\r\n                    hidden: true,\r\n                },\r\n                footer: {\r\n                    hidden: true,\r\n                },\r\n                sidepanel: {\r\n                    hidden: true,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.returnUrl = this.route.snapshot.queryParamMap.get(\"returnUrl\");\r\n        this.loginForm = new FormGroup({\r\n            email: new FormControl(\"\", [Validators.required, Validators.email]),\r\n            password: new FormControl(\"\", [Validators.required]),\r\n        });\r\n    }\r\n    onSubmit() {\r\n        const model = this.loginForm.value;\r\n        this._authService.login(model).pipe(takeUntil(this._unsubscribeAll)).subscribe(\r\n            (response) => {\r\n                this.errorType = \"success\";\r\n                this.responseMessage = MESSAGES.LOGGED_IN();\r\n                setTimeout(() => {\r\n                    this.router.navigateByUrl(\r\n                        this.returnUrl ? this.returnUrl : \"/ent/user\"\r\n                    );\r\n                }, 1000);\r\n            },\r\n            (response) => {\r\n                this.errorType = \"error\";\r\n                if (response.statusCode === 401) {\r\n                    this.responseMessage = MESSAGES.INVALID_CREDENTIAL();\r\n                } else {\r\n                    this.responseMessage = MESSAGES.UNKNOWN();\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n","<div class=\"auth-container\" fxLayout=\"column\">\r\n    <div\r\n        class=\"auth-form-wrapper\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n    >\r\n        <div\r\n            class=\"auth-form\"\r\n            [@animate]=\"{\r\n                value: '*',\r\n                params: { duration: '300ms', y: '100px' }\r\n            }\"\r\n        >\r\n            <div class=\"logo\">\r\n                <img src=\"assets/images/logos/fuse.svg\" />\r\n            </div>\r\n\r\n            <div class=\"title\">LOGIN TO YOUR ACCOUNT</div>\r\n            <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n            <br>\r\n            <form\r\n                name=\"loginForm\"\r\n                [formGroup]=\"loginForm\"\r\n                (ngSubmit)=\"onSubmit()\"\r\n                novalidate\r\n            >\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Email <app-required-indicator></app-required-indicator></mat-label>\r\n                    <input matInput formControlName=\"email\" />\r\n                    <mat-icon matSuffix class=\"secondary-text\">mail</mat-icon>\r\n                    <mat-error>\r\n                        <app-mat-error\r\n                            [control]=\"loginForm.get('email')\"\r\n                        ></app-mat-error>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Password <app-required-indicator></app-required-indicator></mat-label>\r\n                    <input\r\n                        matInput\r\n                        type=\"password\"\r\n                        formControlName=\"password\"\r\n                    />\r\n                    <mat-icon matSuffix class=\"secondary-text\"\r\n                        >vpn_key</mat-icon\r\n                    >\r\n                    <mat-error>\r\n                        <app-mat-error\r\n                            [control]=\"loginForm.get('password')\"\r\n                        ></app-mat-error>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <div\r\n                    class=\"remember-forgot-password\"\r\n                    fxLayout=\"row\"\r\n                    fxLayout.xs=\"column\"\r\n                    fxLayoutAlign=\"space-between center\"\r\n                >\r\n                    <a\r\n                        class=\"forgot-password\"\r\n                        mat-button\r\n                        color=\"warn\"\r\n                        [routerLink]=\"'/auth/forgot-password'\"\r\n                    >\r\n                        Forgot Password?\r\n                    </a>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    mat-raised-button\r\n                    color=\"accent\"\r\n                    class=\"submit-button\"\r\n                    aria-label=\"LOG IN\"\r\n                    [disabled]=\"loginForm.invalid\"\r\n                >\r\n                    LOGIN\r\n                </button>\r\n            </form>\r\n            <div class=\"separator\">\r\n                <span class=\"text\">Login with</span>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n                <button\r\n                    mat-raised-button\r\n                    class=\"google\"\r\n                    style=\"background-color: #d73d32; color: white;\"\r\n                >\r\n                    Google\r\n                </button>\r\n\r\n                <button\r\n                    mat-raised-button\r\n                    class=\"facebook\"\r\n                    style=\"background-color: rgb(63, 92, 154); color: white;\"\r\n                >\r\n                    Facebook\r\n                </button>\r\n                <button\r\n                    mat-raised-button\r\n                    class=\"github\"\r\n                    style=\"background-color: black; color: white;\"\r\n                >\r\n                    Github\r\n                </button>\r\n                <button\r\n                    mat-raised-button\r\n                    class=\"twitter\"\r\n                    style=\"background-color: #2196f3; color: white;\"\r\n                >\r\n                    Twitter\r\n                </button>\r\n            </div>\r\n            <!-- <div class=\"register\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                <span class=\"text\">Don't have an account?</span>\r\n                <a class=\"link\" [routerLink]=\"'/auth/register'\">Create an account</a>\r\n            </div> -->\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\r\nimport {\r\n    FormGroup,\r\n    FormBuilder,\r\n    Validators,\r\n    FormControl,\r\n} from \"@angular/forms\";\r\nimport { FuseConfigService } from \"@fuse/services/config.service\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\n\r\n@Component({\r\n    selector: \"app-phone-verification\",\r\n    templateUrl: \"./phone-verification.component.html\",\r\n    styleUrls: [\"./phone-verification.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class PhoneVerificationComponent implements OnInit {\r\n    recoverPasswordForm: FormGroup;\r\n\r\n    constructor(\r\n        private _fuseConfigService: FuseConfigService,\r\n        private _formBuilder: FormBuilder\r\n    ) {\r\n        // Configure the layout\r\n        this._fuseConfigService.config = {\r\n            layout: {\r\n                navbar: {\r\n                    hidden: true,\r\n                },\r\n                toolbar: {\r\n                    hidden: true,\r\n                },\r\n                footer: {\r\n                    hidden: true,\r\n                },\r\n                sidepanel: {\r\n                    hidden: true,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.recoverPasswordForm = new FormGroup({\r\n            code: new FormControl(\"\", [\r\n                Validators.required,\r\n                Validators.minLength(6),\r\n                Validators.maxLength(6),\r\n            ]),\r\n            password: new FormControl(\"\", [Validators.required]),\r\n            confirmPassword: new FormControl(\"\", [\r\n                Validators.required,\r\n                this.passwordMatcher.bind(this),\r\n            ]),\r\n        });\r\n    }\r\n    passwordMatcher(control: FormControl): { [s: string]: boolean } {\r\n        if (\r\n            this.recoverPasswordForm &&\r\n            control.value !== this.recoverPasswordForm.controls.password.value\r\n        ) {\r\n            return { passwordNotMatch: true };\r\n        }\r\n        return null;\r\n    }\r\n    onSubmit() {\r\n        console.log(this.recoverPasswordForm)\r\n    }\r\n}\r\n","<div class=\"auth-container\" fxLayout=\"column\">\r\n    <div\r\n        class=\"auth-form-wrapper\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n    >\r\n        <div\r\n            class=\"auth-form\"\r\n            [@animate]=\"{\r\n                value: '*',\r\n                params: { duration: '300ms', y: '100px' }\r\n            }\"\r\n        >\r\n            <div class=\"logo\">\r\n                <img src=\"assets/images/logos/fuse.svg\" />\r\n            </div>\r\n\r\n            <div class=\"title\">ACCOUNT RECOVERY</div>\r\n            <div class=\"sub-title\">\r\n                A 6 digit verification code has been sent to your registered\r\n                mobile number. Enter that code to continue.\r\n            </div>\r\n\r\n            <form\r\n                name=\"recoverPasswordForm\"\r\n                [formGroup]=\"recoverPasswordForm\"\r\n                novalidate\r\n                (ngSubmit)=\"onSubmit()\"\r\n            >\r\n                <div\r\n                    fxLayout=\"row wrap\"\r\n                    fxLayout.lt-lg=\"column\"\r\n                    fxLayoutAlign.lt-lg=\"center\"\r\n                    fxLayoutGap=\"10px\"\r\n                    fxLayoutAlign=\"start center\"\r\n                    fxFlex=\"1 1 auto\"\r\n                >\r\n                    <mat-form-field appearance=\"outline\" class=\"pl-4\">\r\n                        <mat-label>Code</mat-label>\r\n                        <input matInput formControlName=\"code\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >phone</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"recoverPasswordForm.get('code')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field appearance=\"outline\" class=\"pr-4\">\r\n                        <mat-label>Password</mat-label>\r\n                        <input\r\n                            type=\"password\"\r\n                            matInput\r\n                            formControlName=\"password\"\r\n                        />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >vpn_key</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"recoverPasswordForm.get('password')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" class=\"pl-4\">\r\n                        <mat-label>Confirm Password</mat-label>\r\n                        <input\r\n                            type=\"password\"\r\n                            matInput\r\n                            formControlName=\"confirmPassword\"\r\n                        />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >vpn_key</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"\r\n                                    recoverPasswordForm.get('confirmPassword')\r\n                                \"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <div fxLayout=\"row\" fxFlex=\"100\" fxLayoutAlign=\"center center\">\r\n                        <button\r\n                            mat-raised-button\r\n                            class=\"submit-button\"\r\n                            color=\"accent\"\r\n                            aria-label=\"SEND RESET LINK\"\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            <div class=\"login-redirect\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <a\r\n                    class=\"link\"\r\n                    mat-button\r\n                    color=\"warn\"\r\n                    [routerLink]=\"'/auth/login'\"\r\n                    >Go back to login</a\r\n                >\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation, Injector } from \"@angular/core\";\r\nimport {\r\n    FormBuilder,\r\n    FormGroup,\r\n    Validators,\r\n    FormControl,\r\n} from \"@angular/forms\";\r\nimport { Subject } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\n\r\nimport { FuseConfigService } from \"@fuse/services/config.service\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { AuthenticationService } from \"@shared/services/auth/authentication.service\";\r\nimport { camelToSnakeCase } from \"@shared/helpers/global.helper\";\r\nimport { BaseComponent } from '@shared/components/base/base.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MESSAGES } from '@shared/constants/messages.constant';\r\n\r\n@Component({\r\n    selector: \"reset-password\",\r\n    templateUrl: \"./reset-password.component.html\",\r\n    styleUrls: [\"./reset-password.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class ResetPasswordComponent extends BaseComponent implements OnInit, OnDestroy {\r\n    resetPasswordForm: FormGroup;\r\n   token:string;\r\n \r\n    constructor(\r\n        private _fuseConfigService: FuseConfigService,\r\n        private _authService: AuthenticationService,\r\n         private activatedRoute: ActivatedRoute\r\n        ,\r\n        injector: Injector\r\n        ) {\r\n            super(injector);\r\n        this.token= this.activatedRoute.snapshot.paramMap.get(\"token\");\r\n        // Configure the layout\r\n        this._fuseConfigService.config = {\r\n            layout: {\r\n                navbar: {\r\n                    hidden: true,\r\n                },\r\n                toolbar: {\r\n                    hidden: true,\r\n                },\r\n                footer: {\r\n                    hidden: true,\r\n                },\r\n                sidepanel: {\r\n                    hidden: true,\r\n                },\r\n            },\r\n        };\r\n\r\n        // Set the private defaults\r\n       \r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getEmailTokenStatus();\r\n        this.resetPasswordForm = new FormGroup({\r\n            password: new FormControl(\"\", Validators.required),\r\n            passwordConfirm: new FormControl(\"\", [\r\n                Validators.required,\r\n                this.confirmPasswordValidator.bind(this),\r\n            ]),\r\n        });\r\n    }\r\n\r\n    confirmPasswordValidator(control: FormControl): { [s: string]: boolean } {\r\n        if (\r\n            this.resetPasswordForm &&\r\n            control.value !== this.resetPasswordForm.controls.password.value\r\n        ) {\r\n            return { passwordNotMatch: true };\r\n        }\r\n        return null;\r\n    }\r\n    onSubmit() {\r\n        let model = this.resetPasswordForm.value;\r\n        model = camelToSnakeCase(model);\r\n        this._authService.resetPassword(model,this.token).pipe(takeUntil(this._unsubscribeAll)).subscribe(\r\n            (response) => {\r\n                 this.errorType = \"success\";\r\n                 this.responseMessage = MESSAGES.PASSWORD_UPDATED();\r\n            },\r\n           (response=>super.onError(response))\r\n        );\r\n    }\r\n    getEmailTokenStatus() {\r\n        this._authService.getTokenStatus(this.token).pipe(takeUntil(this._unsubscribeAll)).subscribe(\r\n            (response) => {\r\n\r\n            },\r\n            (error) => {\r\n                 this.errorType = \"error\";\r\n                 this.responseMessage = MESSAGES.INVALID_RESET_TOKEN();\r\n            }\r\n        );\r\n    }\r\n  \r\n}\r\n","<div class=\"auth-container\" fxLayout=\"column\">\r\n    <div class=\"auth-form-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n        <div class=\"auth-form\" [@animate]=\"{value:'*',params:{duration:'300ms',y:'100px'}}\">\r\n            <div class=\"logo\">\r\n                <img src=\"assets/images/logos/fuse.svg\">\r\n            </div>\r\n            <div class=\"title\">RESET YOUR PASSWORD</div>\r\n            <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n        <br>\r\n            <form *ngIf=\"errorType!='error'\" name=\"resetPasswordForm\" [formGroup]=\"resetPasswordForm\"   (ngSubmit)=\"onSubmit()\" novalidate>\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Password<app-required-indicator></app-required-indicator></mat-label>\r\n                    <input matInput type=\"password\" formControlName=\"password\">\r\n                    <mat-icon matSuffix class=\"secondary-text\">vpn_key</mat-icon>\r\n                    <mat-error>\r\n                        <app-mat-error\r\n                            [control]=\"resetPasswordForm.get('password')\"\r\n                        ></app-mat-error>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Confirm Password <app-required-indicator></app-required-indicator></mat-label>\r\n                    <input matInput type=\"password\" formControlName=\"passwordConfirm\">\r\n                    <mat-icon matSuffix class=\"secondary-text\">vpn_key</mat-icon>\r\n                    <mat-error>\r\n                        <app-mat-error\r\n                            [control]=\"resetPasswordForm.get('passwordConfirm')\"\r\n                        ></app-mat-error>\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <button type=\"submit\" mat-raised-button class=\"submit-button\" color=\"accent\"\r\n                        aria-label=\"RESET MY PASSWORD\" [disabled]=\"resetPasswordForm.invalid\">\r\n                    RESET MY PASSWORD\r\n                </button>\r\n            </form>\r\n            <div class=\"login\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n                <a class=\"link\" mat-button color=\"warn\" [routerLink]=\"'/auth/login'\">Go back to login</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatRippleModule } from \"@angular/material/core\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatMenuModule,\r\n        MatFormFieldModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatRippleModule,\r\n        MatDatepickerModule,\r\n        MatSelectModule,\r\n        MatTooltipModule,\r\n        MatToolbarModule,\r\n        MatDialogModule,\r\n        MatTableModule,\r\n        MatCheckboxModule,\r\n    ],\r\n    exports: [\r\n        MatButtonModule,\r\n        MatMenuModule,\r\n        MatFormFieldModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatRippleModule,\r\n        MatDatepickerModule,\r\n        MatSelectModule,\r\n        MatTooltipModule,\r\n        MatToolbarModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        MatTableModule,\r\n        MatCheckboxModule,\r\n    ],\r\n})\r\nexport class MaterialFormsModule {}\r\n"]}