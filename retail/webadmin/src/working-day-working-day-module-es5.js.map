{"version":3,"sources":["webpack:///src/app/features/calender/working-day/views/working-day/working-day.component.ts","webpack:///src/app/features/calender/working-day/views/working-day/working-day.component.html","webpack:///src/app/features/calender/working-day/working-day-routing.module.ts","webpack:///src/app/features/calender/working-day/working-day.module.ts"],"names":["WorkingDayComponent","_matDialog","_service","injector","displayedColumns","pageSize","PAGE_SIZE","pageSizeOptions","PAGE_SIZE_OPTIONS","dataSource","getData","getWorkingDays","subscribe","response","workingDays","paginator","sort","error","console","log","_this","dialogRef","open","data","panelClass","disableClose","hasBackdrop","componentInstance","sendResponse","id","editWorkingDay","createWorkingDay","model","unshift","updateGrid","errorType","responseMessage","CREATED","closeAll","hideMessage","_errorEmitService","emit","UNKNOWN","setTimeout","UPDATED","index","findIndex","x","type","message","REMOVE_CONFIRMATION","dialogData","afterClosed","status","deleteWorkingDay","splice","DELETED","text","openDialog","selector","templateUrl","styleUrls","animations","encapsulation","None","static","routes","path","component","WorkingDayRoutingModule","forChild","imports","exports","WorkingDayModule","declarations"],"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","file":"working-day-working-day-module-es5.js","sourcesContent":["import { Component, Injector, OnInit, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { CONFIG } from '@config/index';\nimport { WorkingDay } from \"@feature/calender/models/working-week.model\";\nimport { CalendarService } from \"@feature/calender/services/calendar.service\";\nimport { fuseAnimations } from '@fuse/animations';\nimport { BaseComponent } from \"@shared/components/base/base.component\";\nimport {\n    ConfirmDialogComponent,\n    ConfirmDialogModel,\n} from \"@shared/components/confirm-dialog/confirm-dialog.component\";\nimport { MESSAGES } from '@shared/constants/messages.constant';\nimport {\n    camelToSentenceCase,\n    camelToSnakeCase,\n    snakeToCamelArray,\n} from \"@shared/helpers/global.helper\";\nimport { WorkingDayFormComponent } from '../../components/working-day-form/working-day-form.component';\n\n@Component({\n    selector: \"app-working-day\",\n    templateUrl: \"./working-day.component.html\",\n    styleUrls: [\"./working-day.component.scss\"],\n    animations: fuseAnimations,\n    encapsulation: ViewEncapsulation.None,\n})\nexport class WorkingDayComponent extends BaseComponent implements OnInit {\n    dialogRef: any;\n    workingDays: WorkingDay[];\n    displayedColumns = [\n        \"weekDay\",\n        \"startTime\",\n        \"endTime\",\n        \"fullDay\",\n        \"remarks\",\n        \"status\",\n        \"actions\",\n    ];\n    pageSize: number = CONFIG.PAGE_SIZE;\n    pageSizeOptions: Array<number> = CONFIG.PAGE_SIZE_OPTIONS;\n    dataSource = new MatTableDataSource<WorkingDay>();\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    constructor(\n        public _matDialog: MatDialog,\n        private _service: CalendarService,\n        injector: Injector\n    ) {\n        super(injector);\n    }\n\n    ngOnInit(): void {\n        this.getData();\n    }\n\n    getData() {\n        this._service.getWorkingDays().subscribe(\n            (response) => {\n                this.workingDays = snakeToCamelArray(response);\n                this.dataSource = new MatTableDataSource(\n                    snakeToCamelArray(response)\n                );\n                this.dataSource.paginator = this.paginator;\n                this.dataSource.sort = this.sort;\n            },\n            (error) => {\n                console.log(error);\n            }\n        );\n    }\n    openDialog(): void {\n        var _this = this;\n        this.dialogRef = this._matDialog\n            .open(WorkingDayFormComponent, {\n                data: new WorkingDay(),\n                panelClass: \"app-working-day-form\",\n                disableClose: true,\n                hasBackdrop: true,\n            })\n            .componentInstance.sendResponse.subscribe((response) => {\n                if (response.id) {\n                    _this.editWorkingDay(response);\n                } else {\n                    _this.createWorkingDay(response);\n                }\n            });\n    }\n \n    createWorkingDay(model: WorkingDay) {\n        this._service.createWorkingDay(model).subscribe(\n            (response) => {\n                const data = this.dataSource.data;\n                data.unshift(response);\n                this.updateGrid(data);\n                this.errorType = \"success\";\n                this.responseMessage = MESSAGES.CREATED(\"Working Day\");\n                this._matDialog.closeAll();\n                this.hideMessage();\n            },\n            (response) => {\n                this._errorEmitService.emit(MESSAGES.UNKNOWN(), \"error\");\n            }\n        );\n    }\n    hideMessage() {\n        setTimeout(() => {\n            this.responseMessage = \"\";\n        }, 2000);\n    }\n    editWorkingDay(model: WorkingDay) {\n        this._service.editWorkingDay(model.id, model).subscribe(\n            (response) => {\n                this.errorType = \"success\";\n                this.responseMessage = MESSAGES.UPDATED(\"Working Day\");\n                const index = this.dataSource.data.findIndex(\n                    (x) => x.id == model.id\n                );\n                this.hideMessage();\n                this.workingDays[index] = response;\n                this.updateGrid(this.workingDays);\n                this._matDialog.closeAll();\n            },\n            (response) => {\n                this._errorEmitService.emit(MESSAGES.UNKNOWN(), \"error\");\n            }\n        );\n    }\n    confirmDialog(type, id): void {\n        const message = MESSAGES.REMOVE_CONFIRMATION();\n        const dialogData = new ConfirmDialogModel(\"Confirm Action\", message);\n        const dialogRef = this._matDialog.open(ConfirmDialogComponent, {\n            data: dialogData,\n            disableClose: true,\n            panelClass: \"app-confirm-dialog\",\n            hasBackdrop: true,\n        });\n\n        dialogRef.afterClosed().subscribe((status) => {\n            if (status) {\n               this.deleteWorkingDay(id)\n            }\n        });\n    }\n    deleteWorkingDay(id: string) {\n        this._service.deleteWorkingDay(id).subscribe(\n            (response) => {\n                const index = this.dataSource.data.findIndex((x) => x.id == id);\n                this.workingDays.splice(index, 1);\n                this.updateGrid(this.workingDays);\n                this.errorType = \"success\";\n                this.hideMessage();\n                this.responseMessage = MESSAGES.DELETED(\"Working Day\");\n            },\n            (response) => super.onError(response)\n        );\n    }\n    camelToSentenceCase(text) {\n        return camelToSentenceCase(text);\n    }\n    camelToSnakeCase(text) {\n        return camelToSnakeCase(text);\n    }\n    updateGrid(data) {\n        this.dataSource.data = data;\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    }\n}\n","<div class=\"page-container page-layout carded fullwidth inner-scroll\">\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- HEADER -->\n        <div class=\"header accent\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayout.gt-sm=\"row\" fxLayoutAlign.gt-sm=\"space-between center\">\n\n            <!-- APP TITLE -->\n            <div class=\"logo mb-24 mb-md-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <mat-icon class=\"logo-icon s-32 mr-16\" [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n                    calendar_today\n                </mat-icon>\n                <span class=\"logo-text h1\" [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                    Working Days\n                </span>\n            </div>\n            <!-- / APP TITLE -->\n\n            <!-- ADD BUTTON -->\n            <button mat-raised-button color=\"accent\" (click)=\"openDialog()\" class=\"add-product-button fuse-white mt-24 mt-md-0\">\n                <span>ADD NEW</span>\n            </button>\n            <!-- / ADD BUTTON -->\n\n        </div>\n        <!-- / HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card\" fusePerfectScrollbar>\n            <!-- <div class=\"spinner-container\" *ngIf=\"dataSource.loading$ | async\">\n                <mat-spinner></mat-spinner>\n            </div> -->\n            <div *ngIf=\"responseMessage.length > 0\" fxLayout=\"row\" fxLayoutAlign=\"center\" class=\"p-16  message-box {{ errorType }} \">\n                {{ responseMessage }}\n            </div>\n            <mat-table #table matSort matSortActive=\"username\" matSortDirection=\"asc\" matSortDisableClear [dataSource]=\"dataSource\">\n                <!-- COLUMNS AND ROWS-->\n                <ng-container *ngFor=\"let key of displayedColumns\" [matColumnDef]=\"key\">\n                    <mat-header-cell *matHeaderCellDef>{{ key.includes('action') ? 'Action' : camelToSentenceCase(key) }}</mat-header-cell>\n            \n                    <mat-cell *matCellDef=\"let element; let i = dataIndex\">\n                      <ng-container [ngSwitch]=\"key\">\n                        <span *ngSwitchCase=\"'startTime'\">\n                            {{element['fullDay']==1 ? 'N/A' : element[key]}}\n                        </span>\n                        <span *ngSwitchCase=\"'endTime'\">\n                            {{element['fullDay']==1 ? 'N/A' : element[key]}}\n                        </span>\n                        <span *ngSwitchCase=\"'fullDay'\">\n                            {{element[key]==1 ? 'Yes' : 'No'}}\n                        </span>\n                        <span *ngSwitchCase=\"'actions'\">\n                            <mat-icon appPermission [permissions]=\"userPermissions\" matTooltip=\"Delete working day\" [type]=\"'delete'\" color=\"warn\" type=\"button\" (click)=\" confirmDialog('delete',element['id'])\">delete</mat-icon> &nbsp;&nbsp;\n                            <mat-icon type=\"button\" (click)=\"openDialog(element)\" matTooltip=\"Edit working day\">mode_edit</mat-icon> &nbsp;&nbsp;\n                        </span>\n                        <span *ngSwitchDefault >\n                            {{element[key]}}\n                        </span>\n                    </ng-container>\n                    </mat-cell>\n                </ng-container>\n                <!-- -->\n                <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [@animate]=\"{value:'*',params:{y:'100%'}}\">\n                </mat-row>\n            \n            </mat-table>\n            <mat-paginator #paginator [pageIndex]=\"0\" [pageSize]=\"pageSize\" showFirstLastButtons [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\n        </div>\n        <!-- / CONTENT CARD -->\n    </div>\n    <!-- / CENTER -->\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WorkingDayComponent } from './views/working-day/working-day.component';\n\n\nconst routes: Routes = [\n  {\n      path: \"\",\n      component: WorkingDayComponent\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class WorkingDayRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WorkingDayRoutingModule } from './working-day-routing.module';\nimport { WorkingDayComponent } from './views/working-day/working-day.component';\nimport { WorkingDayFormComponent } from './components/working-day-form/working-day-form.component';\nimport { FuseSidebarModule } from '@fuse/components';\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { MaterialModule } from '@shared/modules/material/material.module';\nimport { SharedModule } from '@shared/shared.module';\n\n\n@NgModule({\n  declarations: [WorkingDayComponent, WorkingDayFormComponent],\n  imports: [\n    CommonModule,\n    WorkingDayRoutingModule,\n    SharedModule,\n    FuseSidebarModule,\n    FuseSharedModule,\n    MaterialModule,\n  ]\n})\nexport class WorkingDayModule { }\n"]}