{"version":3,"sources":["webpack:///src/app/shared/services/validator-service/validator.service.ts"],"names":["ValidatorService","control","value","startsWith","includes","validUrl","str","toString","replace","length","whitespace","validCharacters","matches","match","invalid_characters","regex","numbers_only","numbers_decimal_only","invalid_cnic","positiveOnly","currentYear","moment","year","val","date","Date","getTime","isFutureDate","parseInt","notValid"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\r\nimport { Validators } from '@angular/forms';\r\ndeclare var moment: any;\r\n\r\nexport class ValidatorService extends Validators {\r\n  // constructor() { super() }\r\n  // ValidateUrl(control: AbstractControl) {\r\n  static ValidateUrl(control: FormControl) {\r\n    if (!control.value.startsWith('https') || !control.value.includes('.io')) {\r\n      return { validUrl: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n \r\n  static NoWhitespaceValidator(control: FormControl) {\r\n    const str = control.value.toString();\r\n    if (!str.replace(/\\s/g, '').length && str.length > 0) {\r\n      return { whitespace: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static validateCharacters(control: FormControl) {\r\n    const validCharacters = /[^\\s\\w,.:&\\/()+%'`@-]/;\r\n    // first check if the control has a value\r\n    if (control.value && control.value.length > 0) {\r\n      // match the control value against the regular expression\r\n      const matches = control.value.match(validCharacters);\r\n      // if there are matches return an object, else return null.\r\n      return matches && matches.length ? { invalid_characters: matches } : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n \r\n  static numbersOnly(control: FormControl) {\r\n    const regex = '^[0-9]*$';\r\n    if (control.value && control.value.length > 0) {\r\n      const matches = control.value.match(regex);\r\n      return matches && matches.length ? null : { numbers_only: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static numberAndDecimal(control: FormControl) {\r\n    const regex = /^[-+]?[0-9]+(\\.[0-9]+)?$/;\r\n    if (control.value && control.value.length > 0) {\r\n      const matches = control.value.match(regex);\r\n      return matches && matches.length ? null : { numbers_decimal_only: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static validateCNIC(control: FormControl) {\r\n    const regex = '^[0-9+]{5}-[0-9+]{7}-[0-9]{1}$';\r\n    if (control.value && control.value.length > 0) {\r\n      const matches = control.value.match(regex);\r\n      return matches && matches.length ? null : { invalid_cnic: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static positiveOnly(control: FormControl) {\r\n    if (control.value < 0) {\r\n      return { positiveOnly: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static validYear(control: FormControl) {\r\n    const currentYear = moment().year();\r\n    const val = control.value;\r\n    if (val) {\r\n      return null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static notFutureDate(control: FormControl) {\r\n    const date = new Date(control.value).getTime();\r\n    return new Date().getTime() > date ? null : { isFutureDate: true };\r\n  }\r\n\r\n  static dropdownValidator(control: FormControl) {\r\n    if (parseInt(control.value, 10) > 0) {\r\n      return null;\r\n    } else {\r\n      return { notValid: true };\r\n    }\r\n  }\r\n  \r\n}\r\n"]}