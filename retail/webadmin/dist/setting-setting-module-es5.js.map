{"version":3,"sources":["webpack:///src/app/features/setting/components/about/about.component.ts","webpack:///src/app/features/setting/components/about/about.component.html","webpack:///src/app/features/setting/components/update-password/update-password.component.ts","webpack:///src/app/features/setting/components/update-password/update-password.component.html","webpack:///src/app/features/setting/components/update-profile/update-profile.component.ts","webpack:///src/app/features/setting/components/update-profile/update-profile.component.html","webpack:///src/app/features/setting/setting-routing.module.ts","webpack:///src/app/features/setting/setting.constant.ts","webpack:///src/app/features/setting/setting.module.ts","webpack:///src/app/features/setting/setting.service.ts","webpack:///src/app/features/setting/views/profile/profile.component.ts","webpack:///src/app/features/setting/views/profile/profile.component.html"],"names":["AboutComponent","nationalityList","id","nationalities","selector","templateUrl","styleUrls","encapsulation","None","animations","UpdatePasswordComponent","injector","submit","updatePasswordForm","currentPassword","required","newPassword","pattern","PASSWORD","confirmPassword","confirmPasswordValidator","bind","control","value","controls","passwordNotMatch","model","emit","onSubmit","UpdateProfileComponent","matDialogRef","data","sendResponse","genderList","_errorEmitService","currentMessage","pipe","_unsubscribeAll","subscribe","item","errorType","type","responseMessage","message","userForm","user","firstName","middleName","lastName","contactNo","numbersOnly","gender","email","disabled","dateOfBirth","Date","nationalityId","toLocaleDateString","close","response","onClose","routes","path","redirectTo","component","SettingRoutingModule","forChild","imports","exports","UPDATE_PASSWORD","UPDATE_PROFILE","SettingModule","declarations","SettingService","_networkService","_refService","onUpdate","getCountries","providedIn","ProfileComponent","_matDialog","_settingService","currentUser","_authUserService","User","getData","_this","dialogRef","open","panelClass","disableClose","hasBackdrop","componentInstance","onUpdateProfile","getNationalities","updateProfile","UPDATED","closeAll","UNKNOWN","updatePassword","status","CUSTOM","openDialog","onUpdatePassword"],"mappings":"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","file":"setting-setting-module-es5.js","sourcesContent":["import { getName } from \"@shared/helpers/global.helper\";\r\nimport { Component, OnInit, ViewEncapsulation, Input } from \"@angular/core\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { NATIONALITY_LIST } from \"@shared/constants/app.constants\";\r\n\r\n@Component({\r\n    selector: \"app-about\",\r\n    templateUrl: \"./about.component.html\",\r\n    styleUrls: [\"./about.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class AboutComponent implements OnInit {\r\n    @Input() user: any;\r\n    @Input() nationalities: any[];\r\n\r\n    nationalityList: any[] = NATIONALITY_LIST;\r\n    constructor() {}\r\n\r\n    ngOnInit(): void {\r\n    }\r\n    getNationality(id) {\r\n        return getName(id, \"nationality\", this.nationalities);\r\n    }\r\n}\r\n","<div id=\"about\" class=\"p-24\" fxLayout=\"row wrap\">\r\n    <div class=\"about-content\" fxLayout=\"column\" fxFlex=\"100\">\r\n        <div class=\"profile-box info-box general\" fxLayout=\"column\">\r\n\r\n            <header class=\"accent\">\r\n                <div class=\"title\">General Information</div>\r\n            </header>\r\n\r\n            <div class=\"content\">\r\n                <div fxLayout=\"column\" fxFlex=\"48\">\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">User Name</div>\r\n                        <div class=\"info\" *ngIf=\"user.username ; else defaultText\">{{user.username}}</div>\r\n                    </div>\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">First Name</div>\r\n                        <div class=\"info\" *ngIf=\"user.firstName ; else defaultText\">{{user.firstName }}</div>\r\n                    </div>\r\n\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Middle Name</div>\r\n                        <div class=\"info\" *ngIf=\"user.middleName ; else defaultText\">{{user.middleName}}</div>\r\n                    </div>\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Last Name</div>\r\n                        <div class=\"info\" *ngIf=\"user.lastName ; else defaultText\">{{user.lastName}}</div>\r\n                    </div>\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Email</div>\r\n                        <div class=\"info\" *ngIf=\"user.email ; else defaultText\">{{user.email}}</div>\r\n                    </div>\r\n\r\n                   \r\n                </div>\r\n                <div fxLayout=\"column\" fxFlex=\"48\">\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Gender</div>\r\n                        <div class=\"info\" *ngIf=\"user.gender ; else defaultText\">{{user.gender}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Nationality</div>\r\n                        <div class=\"info\" *ngIf=\"user.nationalityId ; else defaultText\">{{getNationality(user.nationalityId)}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Date of Birth</div>\r\n                        <div class=\"info\" *ngIf=\"user.dateOfBirth ; else defaultText\">{{user.dateOfBirth | date:'mediumDate'}}</div>\r\n                    </div>\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Contact</div>\r\n                        <div class=\"info\" *ngIf=\"user.contactNo ; else defaultText\">{{user.contactNo}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"info-line\">\r\n                        <div class=\"title\">Created On</div>\r\n                        <div class=\"info\" *ngIf=\"user.createdOn ; else defaultText\">{{user.createdOn | date:'mediumDate'}}</div>\r\n                    </div>\r\n\r\n                    <ng-template #defaultText>\r\n                        <app-default-text></app-default-text>\r\n                    </ng-template>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>","import { Component, OnInit, ViewEncapsulation, Injector, EventEmitter, Output, Input } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { camelToSnakeCase } from \"@shared/helpers/global.helper\";\r\nimport { BaseComponent } from '@shared/components/base/base.component';\r\nimport { REGEX } from '@config/index';\r\n\r\n@Component({\r\n    selector: \"app-update-password\",\r\n    templateUrl: \"./update-password.component.html\",\r\n    styleUrls: [\"./update-password.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class UpdatePasswordComponent extends BaseComponent implements OnInit {\r\n    updatePasswordForm: FormGroup;\r\n    @Input() responseMessage:string;\r\n    @Input() errorType:string;\r\n    @Output() submit = new EventEmitter();\r\n    constructor(\r\n        injector: Injector\r\n        ) {\r\n            super(injector);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updatePasswordForm = new FormGroup({\r\n            currentPassword: new FormControl(\"\", [Validators.required]),\r\n            newPassword: new FormControl(\"\", [Validators.required,Validators.pattern(REGEX.PASSWORD)]),\r\n            confirmPassword: new FormControl(\"\", [\r\n                Validators.required,\r\n                this.confirmPasswordValidator.bind(this),\r\n            ]),\r\n        });\r\n    }\r\n    confirmPasswordValidator(control: FormControl): { [s: string]: boolean } {\r\n        if (\r\n            this.updatePasswordForm &&\r\n            control.value !== this.updatePasswordForm.controls.newPassword.value\r\n        ) {\r\n            return { passwordNotMatch: true };\r\n        }\r\n        return null;\r\n    }\r\n    onSubmit() {\r\n        let model = { ...this.updatePasswordForm.value };\r\n        model = camelToSnakeCase(model);\r\n       this.submit.emit(model)\r\n    }\r\n}\r\n","<div id=\"about\" class=\"p-24\" fxLayout=\"row wrap\">\r\n    <div class=\"about-content\" fxLayout=\"column\" fxFlex=\"100\">\r\n        <div class=\"profile-box info-box general\" fxLayout=\"column\">\r\n\r\n            <header class=\"accent\">\r\n                <div class=\"title\">Update Password</div>\r\n            </header>\r\n\r\n            <div class=\"content\">\r\n                <form\r\n                class=\"p-24 mr-24\"\r\n                fxLayout=\"column\"\r\n                fxLayoutAlign=\"start\"\r\n                fxFlex=\"1 0\"\r\n                name=\"updatePasswordForm\"\r\n                (ngSubmit)=\"onSubmit()\"\r\n                novalidate\r\n                [formGroup]=\"updatePasswordForm\"\r\n            >\r\n            <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n            <br>\r\n                <div\r\n                    fxLayout=\"row wrap\"\r\n                    fxLayout.lt-lg=\"column\"\r\n                    fxLayoutAlign.lt-lg=\"center\"\r\n                    fxLayoutAlign=\"start center\"\r\n                    fxFlex=\"1 1 auto\"\r\n                >\r\n               \r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"100\" class=\"pr-4\">\r\n                        <mat-label>Current Password <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input type=\"password\" matInput formControlName=\"currentPassword\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"updatePasswordForm.get('currentPassword')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"100\" class=\"pr-4\">\r\n                        <mat-label>Password <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input type=\"password\" matInput formControlName=\"newPassword\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"updatePasswordForm.get('newPassword')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"100\" class=\"pr-4\">\r\n                        <mat-label>Confirm Password <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input type=\"password\" matInput formControlName=\"confirmPassword\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"updatePasswordForm.get('confirmPassword')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            \r\n                <div class=\"actions\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n                    <button\r\n                        type=\"submit\"\r\n                        mat-raised-button\r\n                        color=\"accent\"\r\n                        aria-label=\"Send Message\"\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>","import { SettingService } from './../../setting.service';\r\nimport { Component, OnInit, ViewEncapsulation, Inject, Output, EventEmitter, Injector } from \"@angular/core\";\r\nimport { FormGroup,  FormControl, Validators } from \"@angular/forms\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport {  GENDER_LIST, NATIONALITY_LIST } from \"@shared/constants/app.constants\";\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { User } from '@feature/entitlement/models/user.model';\r\nimport { BaseComponent } from '@shared/components/base/base.component';\r\nimport { ValidatorService } from '@shared/services/validator-service/validator.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-update-profile',\r\n  templateUrl: './update-profile.component.html',\r\n  styleUrls: ['./update-profile.component.scss'],\r\n   encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class UpdateProfileComponent extends BaseComponent implements OnInit {\r\n\r\n    userForm: FormGroup;\r\n    response: User;\r\n    @Output() sendResponse: EventEmitter<User> = new EventEmitter<any>();\r\n    nationalityList: any[];\r\n    genderList: any[]=GENDER_LIST;\r\n    constructor(\r\n        public matDialogRef: MatDialogRef<UpdateProfileComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        injector: Injector\r\n        ) {\r\n            super(injector);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this._errorEmitService.currentMessage\r\n        .pipe(takeUntil(this._unsubscribeAll))\r\n        .subscribe((item) => {\r\n            this.errorType = item.type;\r\n            this.responseMessage = item.message;\r\n        });\r\n        this.userForm = new FormGroup({\r\n            id: new FormControl(this.data.user.id),\r\n            firstName: new FormControl(this.data.user.firstName, [Validators.required]),\r\n            middleName: new FormControl(this.data.user.middleName, ),\r\n            lastName: new FormControl(this.data.user.lastName),\r\n            contactNo: new FormControl(this.data.user.contactNo,[Validators.required,ValidatorService.numbersOnly]),\r\n            gender: new FormControl(this.data.user.gender,[Validators.required]),\r\n            email: new FormControl({value:this.data.user.email, disabled:true}),\r\n            dateOfBirth: new FormControl(this.data.user.dateOfBirth ? new Date(this.data.user.dateOfBirth) : null, [Validators.required]),\r\n            nationalityId: new FormControl(this.data.user.nationalityId, [Validators.required] ),\r\n        });\r\n        this.nationalityList= this.data.nationalities\r\n    }\r\n   \r\n    onSubmit() {\r\n        const model = { ...this.userForm.value };\r\n        model.dateOfBirth= new Date(model.dateOfBirth).toLocaleDateString()\r\n        this.sendResponse.emit(model);\r\n    }\r\n    onClose() {\r\n        this.matDialogRef.close(this.response);\r\n    }\r\n}\r\n","<div class=\"dialog-content-wrapper\">\r\n    <mat-toolbar class=\"mat-accent m-0\">\r\n        <mat-toolbar-row\r\n            fxFlex\r\n            fxLayout=\"row\"\r\n            fxLayoutAlign=\"space-between center\"\r\n        >\r\n            <span class=\"title dialog-title\">Edit Your Profile</span>\r\n            <button\r\n                mat-icon-button\r\n                (click)=\"onClose()\"\r\n                aria-label=\"Close dialog\"\r\n            >\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </mat-toolbar-row>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\r\n        <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n        <div fxLayout=\"row\">\r\n            <form\r\n                class=\"p-24 mr-24\"\r\n                fxLayout=\"column\"\r\n                fxLayoutAlign=\"start\"\r\n                fxFlex=\"1 0\"\r\n                name=\"userForm\"\r\n                (ngSubmit)=\"onSubmit()\"\r\n                novalidate\r\n                [formGroup]=\"userForm\"\r\n            >\r\n                <div\r\n                    fxLayout=\"row wrap\"\r\n                    fxLayout.lt-lg=\"column\"\r\n                    fxLayoutAlign.lt-lg=\"center\"\r\n                    fxLayoutGap=\"10px\"\r\n                    fxLayoutAlign=\"start center\"\r\n                    fxFlex=\"1 1 auto\"\r\n                >\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>First Name <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"firstName\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('firstName')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Middle Name</mat-label>\r\n                        <input matInput formControlName=\"middleName\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('middleName')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Last Name <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"lastName\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('lastName')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Date of Birth <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input\r\n                            matInput\r\n                            [matDatepicker]=\"picker\"\r\n                            formControlName=\"dateOfBirth\"\r\n                        />\r\n                        <mat-datepicker-toggle\r\n                            matSuffix\r\n                            [for]=\"picker\"\r\n                        ></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <!-- <mat-icon matSuffix class=\"secondary-text\">vpn_key</mat-icon> -->\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('dateOfBirth')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pr-4\"\r\n                    >\r\n                        <mat-label>Gender <app-required-indicator></app-required-indicator></mat-label>\r\n                        <mat-select formControlName=\"gender\">\r\n                            <mat-option *ngFor=\"let item of genderList\" [value]=\"item.id\">\r\n                                {{item.name}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >face</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('gender')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pr-4\"\r\n                    >\r\n                        <mat-label>Nationality <app-required-indicator></app-required-indicator></mat-label>\r\n                        <mat-select formControlName=\"nationalityId\">\r\n                            <mat-option *ngFor=\"let item of nationalityList\" [value]=\"item.id\">\r\n                                {{item.nationality}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >outlined_flag</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('nationalityId')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Email <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"email\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >email</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('email')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"32\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Contact No<app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"contactNo\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >phone</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('contactNo')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                 \r\n                </div>\r\n\r\n                <div\r\n                    class=\"actions\"\r\n                    fxLayoutGap=\"10px\"\r\n                    fxLayout=\"row\"\r\n                    fxLayoutAlign=\"end center\"\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        mat-raised-button\r\n                        (click)=\"onClose()\"\r\n                        color=\"secondary\"\r\n                        aria-label=\"Follow\"\r\n                        class=\"btn-cancel\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <button\r\n                        type=\"submit\"\r\n                        [disabled]=\"userForm.invalid\"\r\n                        mat-raised-button\r\n                        color=\"accent\"\r\n                        class=\"submit-button\"\r\n                        aria-label=\"Send Message\"\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProfileComponent } from './views/profile/profile.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n      path: \"\",\r\n      redirectTo:'profile',\r\n  },\r\n  {\r\n      path: \"profile\",\r\n      component: ProfileComponent,\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SettingRoutingModule { }\r\n","export const UPDATE_PASSWORD='/api/v1/entitlements/auth/password/'\r\nexport const UPDATE_PROFILE='/api/v1/entitlements/auth/me/'","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { SettingRoutingModule } from \"./setting-routing.module\";\r\nimport { ProfileComponent } from \"./views/profile/profile.component\";\r\nimport { MaterialFormsModule } from \"@shared/modules/material-forms/material-forms.module\";\r\nimport { FuseSharedModule } from '@fuse/shared.module';\r\nimport { AboutComponent } from './components/about/about.component';\r\nimport { UpdateProfileComponent } from './components/update-profile/update-profile.component';\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\r\n\r\n@NgModule({\r\n    declarations: [ProfileComponent, AboutComponent, UpdateProfileComponent, UpdatePasswordComponent],\r\n    imports: [\r\n        CommonModule,\r\n        SettingRoutingModule,\r\n        MatTabsModule,\r\n        MaterialFormsModule,\r\n        SharedModule,\r\n        FuseSharedModule,\r\n    ],\r\n})\r\nexport class SettingModule {}\r\n","import { NetworkService } from '@shared/services/network/network.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { ChangePasswordModel } from './models/setting.model';\r\nimport { UPDATE_PASSWORD, UPDATE_PROFILE } from './setting.constant';\r\nimport { ReferenceService } from '@shared/services/reference/reference.service';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class SettingService {\r\n    constructor(private _networkService:NetworkService, private _refService: ReferenceService) { }\r\n\r\n    updatePassword(model:ChangePasswordModel){\r\n       return this._networkService.onUpdate(UPDATE_PASSWORD,model);\r\n    }\r\n    updateProfile(model:ChangePasswordModel){\r\n       return this._networkService.onUpdate(UPDATE_PROFILE,model);\r\n    }\r\n    getNationalities(){\r\n      return this._refService.getCountries();\r\n    }\r\n    \r\n}","import { SettingService } from \"./../../setting.service\";\r\nimport { Component, OnInit, ViewEncapsulation, Injector } from \"@angular/core\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { UpdateProfileComponent } from \"@feature/setting/components/update-profile/update-profile.component\";\r\nimport { User } from \"@feature/entitlement/models/user.model\";\r\nimport { camelToSnakeCase } from \"@shared/helpers/global.helper\";\r\nimport { BaseComponent } from \"@shared/components/base/base.component\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { MESSAGES } from \"@shared/constants/messages.constant\";\r\n\r\n@Component({\r\n    selector: \"app-profile\",\r\n    templateUrl: \"./profile.component.html\",\r\n    styleUrls: [\"./profile.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class ProfileComponent extends BaseComponent implements OnInit {\r\n    dialogRef: any;\r\n\r\n    currentUser: any;\r\n    nationalities: any[];\r\n    constructor(\r\n        public _matDialog: MatDialog,\r\n        private _settingService: SettingService,\r\n        injector: Injector\r\n    ) {\r\n        super(injector);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.currentUser = this._authUserService.User;\r\n        this.getData();\r\n    }\r\n    openDialog(): void {\r\n        const _this = this;\r\n        this.dialogRef = this._matDialog\r\n            .open(UpdateProfileComponent, {\r\n                data: {\r\n                    user: this.currentUser,\r\n                    nationalities: this.nationalities,\r\n                },\r\n                panelClass: \"app-update-profile\",\r\n                disableClose: true,\r\n                hasBackdrop: true,\r\n            })\r\n            .componentInstance.sendResponse.subscribe((response) => {\r\n                _this.onUpdateProfile(response);\r\n            })\r\n    }\r\n    getData() {\r\n        this._settingService\r\n            .getNationalities()\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    this.nationalities = response;\r\n                },\r\n                (response) => super.onError(response)\r\n            );\r\n    }\r\n    onUpdateProfile(data) {\r\n        data = camelToSnakeCase(data);\r\n        this._settingService\r\n            .updateProfile(data)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response: User) => {\r\n                    this._authUserService.User = response;\r\n                    this.currentUser = this._authUserService.User;\r\n                    this.errorType = \"success\";\r\n                    this.responseMessage = MESSAGES.UPDATED(\"Profile\");\r\n                    this._matDialog.closeAll();\r\n                    this._errorEmitService.emit(\"\", \"\");\r\n                },\r\n                (response) => {\r\n                    this._errorEmitService.emit(MESSAGES.UNKNOWN(), \"error\");\r\n                }\r\n            );\r\n    }\r\n    onUpdatePassword(data) {\r\n        this._settingService\r\n            .updatePassword(data)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    if(response.status=='FAILED'){\r\n                        this.responseMessage= MESSAGES.CUSTOM(response.message);\r\n                        this.errorType=\"error\";\r\n                    }else{\r\n                        this.errorType = \"success\";\r\n                        this.responseMessage = MESSAGES.UPDATED(\"Password\");\r\n                    }\r\n                },\r\n                (response) => super.onError(response)\r\n            );\r\n    }\r\n}\r\n","<div id=\"profile\" class=\"page-layout simple tabbed\">\r\n    <!-- HEADER -->\r\n    <div\r\n        class=\"header p-24\"\r\n        fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\"\r\n        fxLayout.gt-sm=\"row\"\r\n        fxLayoutAlign.gt-sm=\"space-between end\"\r\n    >\r\n        <div\r\n            class=\"user-info\"\r\n            fxLayout=\"column\"\r\n            fxLayoutAlign=\"center center\"\r\n            fxLayout.gt-sm=\"row\"\r\n            fxLayoutAlign.gt-sm=\"start center\"\r\n        >\r\n            <img\r\n                class=\"profile-image avatar huge\"\r\n                src=\"assets/images/avatars/user-male.png\"\r\n                [@animate]=\"{\r\n                    value: '*',\r\n                    params: { delay: '50ms', scale: '0.2' }\r\n                }\"\r\n            />\r\n            <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n                <div\r\n                    class=\"name\"\r\n                    [@animate]=\"{\r\n                        value: '*',\r\n                        params: { delay: '100ms', x: '-25px' }\r\n                    }\"\r\n                >\r\n                   <span *ngIf=\"currentUser.firstName || currentUser.lastName; else username\"> {{currentUser?.firstName + ' ' + currentUser?.lastName}}</span>\r\n                    <ng-template #username>\r\n                        <app-default-text></app-default-text>\r\n                    </ng-template>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n                    <mat-icon class=\"s-16 status online\"></mat-icon>\r\n                    <span class=\"status-1\">{{currentUser.status}}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div\r\n            class=\"actions\"\r\n            fxLayout=\"row\"\r\n            fxLayoutAlign=\"end center\"\r\n            [@animate]=\"{ value: '*', params: { delay: '200ms' } }\"\r\n        >\r\n            <button\r\n                (click)=\"openDialog()\"\r\n                mat-raised-button\r\n                color=\"accent\"\r\n                class=\"btn-update\"\r\n                aria-label=\"Follow\"\r\n            >\r\n                <mat-icon class=\"nav-link-icon\">edit</mat-icon>\r\n                <span>Update Profile</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <!-- / HEADER -->\r\n   \r\n    <div class=\"content\">\r\n\r\n        <mat-tab-group dynamicHeight=\"true\">\r\n            <mat-tab label=\"Profile\">\r\n                <app-about [nationalities]=\"nationalities\" [user]=\"currentUser\"></app-about>\r\n            </mat-tab>\r\n            <mat-tab label=\"Security\">\r\n                <app-update-password [errorType]=\"errorType\" [responseMessage]=\"responseMessage\" (submit)=\"onUpdatePassword($event)\"></app-update-password>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n\r\n    </div>\r\n</div>\r\n"]}