{"version":3,"sources":["webpack:///src/app/features/entitlement/models/user.model.ts","webpack:///src/app/features/entitlement/user/components/detail-item/detail-item.component.ts","webpack:///src/app/features/entitlement/user/components/detail-item/detail-item.component.html","webpack:///src/app/features/entitlement/user/components/user-detail/user-detail.component.ts","webpack:///src/app/features/entitlement/user/components/user-detail/user-detail.component.html","webpack:///src/app/features/entitlement/user/components/user-form/user-form.component.ts","webpack:///src/app/features/entitlement/user/components/user-form/user-form.component.html","webpack:///src/app/features/entitlement/user/services/user.service.ts","webpack:///src/app/features/entitlement/user/user-routing.module.ts","webpack:///src/app/features/entitlement/user/user.module.ts","webpack:///src/app/features/entitlement/user/views/user/user.component.ts","webpack:///src/app/features/entitlement/user/views/user/user.component.html","webpack:///src/app/shared/models/base.model.ts"],"names":["User","roles","DetailItemComponent","selector","templateUrl","styleUrls","animations","encapsulation","None","UserDetailComponent","matDialogRef","data","UserFormComponent","injector","USER_MANAGEMENT","genderList","statusList","sendResponse","predicate","formControl","parent","required","_unsubscribeAll","_errorEmitService","currentMessage","pipe","subscribe","item","errorType","type","responseMessage","message","userForm","id","user","username","requiredIfUpdating","get","value","firstName","middleName","lastName","contactNo","disabled","numbersOnly","gender","email","dateOfBirth","Date","nationalityId","map","x","nationalityList","nationalities","roleId","find","model","length","forEach","isExist","push","_deleted","emit","onSubmit","UserService","_networkService","_refService","modules","post","USER_INVITATION","getById","USER","getAll","ROLE","onUpdate","onDelete","getUsers","getRoles","getCountries","makeFlat","sub_modules","name","providedIn","routes","path","component","UserRoutingModule","forChild","imports","exports","UserModule","declarations","entryComponents","UserComponent","_matDialog","_service","pageSize","PAGE_SIZE","pageSizeOptions","PAGE_SIZE_OPTIONS","displayedColumns","dataSource","getData","forkUserData","response","users","updateGrid","text","_this","dialogRef","open","disableClose","hasBackdrop","panelClass","componentInstance","editUser","createUser","getUserById","openUserDetailModal","mapModules","RESEND_INVITE","REMOVE_CONFIRMATION","dialogData","afterClosed","status","resendInvitation","deleteUser","resendInvite","INVITE_RESENT","hideMessage","unshift","CREATED","closeAll","error","statusCode","EXISTS","UNKNOWN","setTimeout","UPDATED","index","findIndex","splice","DELETED","paginator","sort","openDialog","static","BaseModel","created_on","updated_on"],"mappings":"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","file":"user-user-module-es5.js","sourcesContent":["import { Role } from \"./role.model\";\r\nimport { BaseModel } from '@shared/models/base.model';\r\n\r\nexport class User extends BaseModel {\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    middleName: string;\r\n    contactNo: string;\r\n    dateOfBirth: string;\r\n    nationalityId: string;\r\n    email: string;\r\n    roles: Array<Role> = [];\r\n    gender: string;\r\n}\r\n","import { Component, OnInit, ViewEncapsulation, Input } from \"@angular/core\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\n\r\n@Component({\r\n    selector: \"app-detail-item\",\r\n    templateUrl: \"./detail-item.component.html\",\r\n    styleUrls: [\"./detail-item.component.scss\"],\r\n    animations: fuseAnimations,\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class DetailItemComponent implements OnInit {\r\n    @Input() module;\r\n    constructor() {}\r\n\r\n    ngOnInit(): void {}\r\n}\r\n","\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" >\r\n\r\n        <div class=\"info\" fxFlex fxFlexLayout=\"column\">\r\n\r\n            <div class=\"title\">\r\n                <strong>Module:</strong>    <span style=\"margin-left: 50px;\">{{module.name}}</span>\r\n            </div>\r\n\r\n            <div class=\"tags\" fxLayout=\"row wrap\" fxLayoutAlign=\"start center\" >\r\n                <div class=\"title\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 5px;\">\r\n                   <strong>Permissions:  &nbsp; &nbsp;</strong>\r\n                </div>\r\n                <ng-container *ngFor=\"let p of module.permissions\">\r\n                    <div class=\"tag\" fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"background-color: rgba(0, 0, 0, 0.08)\">\r\n                        <div class=\"tag-color\"  style=\"background-color: rgb(56, 142, 60);\"></div>\r\n                        <div class=\"tag-label\">{{p.record_type}}</div>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n","import { Component, OnInit, ViewEncapsulation, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { fuseAnimations } from '@fuse/animations';\r\n\r\n@Component({\r\n  selector: 'app-user-detail',\r\n  templateUrl: './user-detail.component.html',\r\n  styleUrls: ['./user-detail.component.scss'],\r\n  animations: fuseAnimations,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class UserDetailComponent implements OnInit {\r\n\r\n  constructor(\r\n    public matDialogRef: MatDialogRef<UserDetailComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n) {\r\n}\r\n\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n\r\n}\r\n","<div class=\"dialog-content-wrapper\">\r\n    <mat-toolbar class=\"mat-accent m-0\">\r\n        <mat-toolbar-row fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div class=\"logo mb-24 mb-md-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <mat-icon class=\"logo-icon mr-12\" [@animate]=\"{\r\n                        value: '*',\r\n                        params: { delay: '50ms', scale: '0.2' }\r\n                    }\">\r\n                    person\r\n                </mat-icon>\r\n                <span *ngIf=\"data.firstName || data.lastName; else defaultText\" class=\"logo-text\" [@animate]=\"{\r\n                        value: '*',\r\n                        params: { delay: '100ms', x: '-25px' }\r\n                    }\">\r\n                    {{data.firstName +' ' + data.lastName}}\r\n                </span>\r\n                <ng-template #defaultText>\r\n                    <app-default-text></app-default-text>\r\n                </ng-template>\r\n            </div>\r\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </mat-toolbar-row>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\r\n        <div fxLayout=\"row wrap\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lt-lg=\"center\" fxLayoutGap=\"20px\" fxLayoutAlign=\"start center\" fxFlex=\"1 1 auto\">\r\n          \r\n            <div *ngIf=\"data.modules.length < 1\" fxLayout=\"row\" fxLayoutAlign=\"center\" class=\"p-16 full-width\">\r\n                This user does not have a module assigned.\r\n            </div>\r\n            <ng-container *ngFor=\"let module of data.modules\">\r\n            <app-detail-item [module]=\"module\" ></app-detail-item>\r\n           </ng-container>\r\n           \r\n        </div>\r\n    </div>\r\n</div>","import {\r\n    NATIONALITY_LIST,\r\n    STATUS_LIST,\r\n    GENDER_LIST,\r\n    MODULES,\r\n} from \"@shared/constants/app.constants\";\r\nimport {\r\n    Component,\r\n    OnInit,\r\n    ViewEncapsulation,\r\n    Inject,\r\n    EventEmitter,\r\n    Output,\r\n    Injector,\r\n} from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { User } from \"@feature/entitlement/models/user.model\";\r\nimport { Role } from \"@feature/entitlement/models/role.model\";\r\nimport { camelToSnakeCase } from \"@shared/helpers/global.helper\";\r\nimport { BaseComponent } from \"@shared/components/base/base.component\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { ValidatorService } from \"@shared/services/validator-service/validator.service\";\r\nimport { Subject } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: \"app-user-form\",\r\n    templateUrl: \"./user-form.component.html\",\r\n    styleUrls: [\"./user-form.component.scss\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations,\r\n})\r\nexport class UserFormComponent extends BaseComponent implements OnInit {\r\n    userForm: FormGroup;\r\n\r\n    response: User;\r\n    roles: Role[];\r\n    permissions: any[];\r\n    nationalityList: any[];\r\n    genderList: any[] = GENDER_LIST;\r\n    statusList: any[] = STATUS_LIST;\r\n    @Output() sendResponse: EventEmitter<User> = new EventEmitter<any>();\r\n  \r\n\r\n    constructor(\r\n        public matDialogRef: MatDialogRef<UserFormComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        injector: Injector\r\n    ) {\r\n        super(injector, MODULES.USER_MANAGEMENT);\r\n    }\r\n    requiredIfUpdating(predicate) {\r\n        return (formControl) => {\r\n            if (!formControl.parent) {\r\n                return null;\r\n            }\r\n            if (predicate()) {\r\n                return Validators.required(formControl);\r\n            }\r\n            return null;\r\n        };\r\n    }\r\n    ngOnInit(): void {\r\n        this._unsubscribeAll = new Subject();\r\n        this._errorEmitService.currentMessage\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe((item) => {\r\n                this.errorType = item.type;\r\n                this.responseMessage = item.message;\r\n            });\r\n        this.userForm = new FormGroup({\r\n            id: new FormControl(this.data.user.id),\r\n            username: new FormControl(this.data.user.username, [\r\n                this.requiredIfUpdating(() => !this.userForm.get(\"id\").value),\r\n            ]),\r\n            firstName: new FormControl(this.data.user.firstName, [\r\n                this.requiredIfUpdating(() => this.userForm.get(\"id\").value),\r\n            ]),\r\n            middleName: new FormControl(this.data.user.middleName),\r\n            lastName: new FormControl(this.data.user.lastName, [\r\n                this.requiredIfUpdating(() => this.userForm.get(\"id\").value),\r\n            ]),\r\n            contactNo: new FormControl(\r\n                {\r\n                    value: this.data.user.contactNo,\r\n                    disabled: this.data.user.id ? true : false,\r\n                },\r\n                [ValidatorService.numbersOnly]\r\n            ),\r\n            gender: new FormControl(this.data.user.gender, [\r\n                this.requiredIfUpdating(() => this.userForm.get(\"id\").value),\r\n            ]),\r\n            email: new FormControl(\r\n                {\r\n                    value: this.data.user.email,\r\n                    disabled: this.data.user.id ? true : false,\r\n                },\r\n                [Validators.required, Validators.email]\r\n            ),\r\n            dateOfBirth: new FormControl({\r\n                value: this.data.user.dateOfBirth\r\n                    ? new Date(this.data.user.dateOfBirth)\r\n                    : null,\r\n                disabled: this.data.user.id ? true : false,\r\n            }),\r\n            nationalityId: new FormControl({\r\n                value: this.data.user.nationalityId,\r\n                disabled: this.data.user.id ? true : false,\r\n            }),\r\n            roles: new FormControl(\r\n                this.data.user.roles.map((x) => x.id),\r\n                [Validators.required]\r\n            ),\r\n        });\r\n        this.roles = this.data.roles;\r\n        this.nationalityList= this.data.nationalities;\r\n    }\r\n   \r\n    isExist(roles, roleId) {\r\n        return roles.find((x) => x == roleId);\r\n    }\r\n    onSubmit() {\r\n        let model = { ...this.userForm.value };\r\n        model.roles = this.userForm.value.roles.map((item) => ({\r\n            id: item,\r\n        }));\r\n        if (model.id && model.id.length > 0) {\r\n            this.data.user.roles.forEach((item) => {\r\n                const isExist = this.isExist(model.roles, item.id);\r\n                if (!isExist) model.roles.push({ id: item.id, _deleted: true });\r\n            });\r\n        }\r\n        model = camelToSnakeCase(model);\r\n\r\n        this.sendResponse.emit(model);\r\n    }\r\n  \r\n}\r\n","<div class=\"dialog-content-wrapper\">\r\n    <mat-toolbar class=\"mat-accent m-0\">\r\n        <mat-toolbar-row\r\n            fxFlex\r\n            fxLayout=\"row\"\r\n            fxLayoutAlign=\"space-between center\"\r\n        >\r\n            <div\r\n                class=\"logo mb-24 mb-md-0\"\r\n                fxLayout=\"row\"\r\n                fxLayoutAlign=\"start center\"\r\n            >\r\n                <mat-icon\r\n                    class=\"logo-icon mr-12\"\r\n                    [@animate]=\"{\r\n                        value: '*',\r\n                        params: { delay: '50ms', scale: '0.2' }\r\n                    }\"\r\n                >\r\n                    people\r\n                </mat-icon>\r\n                <span\r\n                    class=\"logo-text\"\r\n                    [@animate]=\"{\r\n                        value: '*',\r\n                        params: { delay: '100ms', x: '-25px' }\r\n                    }\"\r\n                >\r\n                    {{ data.user.id ? \"Edit\" : \"Create\" }} User\r\n                </span>\r\n            </div>\r\n            <button\r\n                mat-icon-button\r\n                (click)=\"matDialogRef.close()\"\r\n                aria-label=\"Close dialog\"\r\n            >\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </mat-toolbar-row>\r\n    </mat-toolbar>\r\n\r\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\r\n        <app-message-box\r\n            [type]=\"errorType\"\r\n            [message]=\"responseMessage\"\r\n        ></app-message-box>\r\n        <div fxLayout=\"row\">\r\n            <form\r\n                class=\"p-24\"\r\n                fxLayout=\"column\"\r\n                fxLayoutAlign=\"start\"\r\n                fxFlex=\"1 0\"\r\n                name=\"userForm\"\r\n                (ngSubmit)=\"onSubmit()\"\r\n                novalidate\r\n                [formGroup]=\"userForm\"\r\n            >\r\n                <div\r\n                    fxLayout=\"row wrap\"\r\n                    fxLayout.lt-lg=\"column\"\r\n                    fxLayoutAlign.lt-lg=\"center\"\r\n                    fxLayoutGap=\"10px\"\r\n                    fxLayoutAlign=\"start center\"\r\n                    fxFlex=\"1 1 auto\"\r\n                >\r\n                    <mat-form-field\r\n                        *ngIf=\"!data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pr-4\"\r\n                    >\r\n                        <mat-label>User Name <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"username\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >personal_pin</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('username')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                        *ngIf=\"data.user.id\"\r\n                    >\r\n                        <mat-label>First Name <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"firstName\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('firstName')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        *ngIf=\"data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Middle Name</mat-label>\r\n                        <input matInput formControlName=\"middleName\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('middleName')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        *ngIf=\"data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Last Name <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"lastName\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >account_circle</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('lastName')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Email <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"email\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >email</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('email')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        *ngIf=\"data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Contact No <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input matInput formControlName=\"contactNo\" />\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >phone</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('contactNo')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pr-4\"\r\n                    >\r\n                        <mat-label>Role <app-required-indicator></app-required-indicator></mat-label>\r\n                        <mat-select formControlName=\"roles\" multiple>\r\n                            <mat-option\r\n                                *ngFor=\"let role of roles\"\r\n                                [value]=\"role.id\"\r\n                            >\r\n                                {{ role.name }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >security</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('roles')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        *ngIf=\"data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pl-4\"\r\n                    >\r\n                        <mat-label>Date of Birth <app-required-indicator></app-required-indicator></mat-label>\r\n                        <input\r\n                            matInput\r\n                            [matDatepicker]=\"picker\"\r\n                            formControlName=\"dateOfBirth\"\r\n                        />\r\n                        <mat-datepicker-toggle\r\n                            matSuffix\r\n                            [for]=\"picker\"\r\n                        ></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('dateOfBirth')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        *ngIf=\"data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pr-4\"\r\n                    >\r\n                        <mat-label>Gender <app-required-indicator></app-required-indicator></mat-label>\r\n                        <mat-select formControlName=\"gender\">\r\n                            <mat-option\r\n                                *ngFor=\"let item of genderList\"\r\n                                [value]=\"item.id\"\r\n                            >\r\n                                {{ item.name }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >face</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('gender')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field\r\n                        *ngIf=\"data.user.id\"\r\n                        appearance=\"outline\"\r\n                        fxFlex=\"48\"\r\n                        class=\"pr-4\"\r\n                    >\r\n                        <mat-label>Nationality <app-required-indicator></app-required-indicator></mat-label>\r\n                        <mat-select formControlName=\"nationalityId\">\r\n                            <mat-option\r\n                                *ngFor=\"let item of nationalityList\"\r\n                                [value]=\"item.id\"\r\n                            >\r\n                                {{ item.nationality }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-icon matSuffix class=\"secondary-text\"\r\n                            >outlined_flag</mat-icon\r\n                        >\r\n                        <mat-error>\r\n                            <app-mat-error\r\n                                [control]=\"userForm.get('nationalityId')\"\r\n                            ></app-mat-error>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div\r\n                    class=\"actions\"\r\n                    fxLayoutGap=\"10px\"\r\n                    fxLayout=\"row\"\r\n                    fxLayoutAlign=\"end center\"\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        mat-raised-button\r\n                        (click)=\"matDialogRef.close()\"\r\n                        color=\"secondary\"\r\n                        aria-label=\"Follow\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <button\r\n                        type=\"submit\"\r\n                        [disabled]=\"userForm.invalid\"\r\n                        class=\"submit-button\"\r\n                        mat-raised-button\r\n                        color=\"accent\"\r\n                        aria-label=\"Send Message\"\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { URI } from '@shared/constants/app.constants';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, forkJoin } from \"rxjs\";\r\nimport { User } from \"../../models/user.model\";\r\nimport { NetworkService } from '@shared/services/network/network.service';\r\nimport { ReferenceService } from '@shared/services/reference/reference.service';\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class UserService {\r\n    modules: Array<any> = [];\r\n    constructor(private _networkService: NetworkService, private _refService: ReferenceService) {}\r\n    createUser(user: User) {\r\n        return this._networkService.post(URI.USER_INVITATION, user);\r\n    }\r\n    resendInvite(id:string) {\r\n        return this._networkService.post(`${URI.USER_INVITATION}/${id}/resend`,{});\r\n    }\r\n    getUserById(id: string) {\r\n        return this._networkService.getById(`${URI.USER}/${id}`);\r\n    }\r\n    getUsers(): Observable<any> {\r\n        return this._networkService.getAll(URI.USER);\r\n    }\r\n    getRoles(): Observable<any> {\r\n        return this._networkService.getAll(URI.ROLE);\r\n    }\r\n    editUser(id: string, model: User) {\r\n        return this._networkService.onUpdate(`${URI.USER}/${id}`, model);\r\n    }\r\n    deleteUser(id: string) {\r\n        return this._networkService.onDelete(`${URI.USER}/${id}`);\r\n    }\r\n    forkUserData() {\r\n        return forkJoin([this.getUsers(), this.getRoles(),this._refService.getCountries()]);\r\n    }\r\n    mapModules(modules) {\r\n        this.modules = [];\r\n        this.makeFlat(modules, \"\");\r\n        return this.modules;\r\n    }\r\n    makeFlat(modules: any[], parent) {\r\n        modules.forEach((item) => {\r\n            item.parent = parent;\r\n            this.modules.push(item);\r\n            if (item.sub_modules) {\r\n                this.makeFlat(item.sub_modules, item.name);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserComponent } from './views/user/user.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n      path: \"\",\r\n      component: UserComponent\r\n      \r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRoutingModule { }\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { UserRoutingModule } from \"./user-routing.module\";\r\nimport { UserComponent } from \"./views/user/user.component\";\r\nimport { FuseSharedModule } from \"@fuse/shared.module\";\r\nimport { UserFormComponent } from \"./components/user-form/user-form.component\";\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { MaterialModule } from '@shared/modules/material/material.module';\r\nimport { UserDetailComponent } from './components/user-detail/user-detail.component';\r\nimport { DetailItemComponent } from './components/detail-item/detail-item.component';\r\n\r\n@NgModule({\r\n    declarations: [UserComponent, UserFormComponent, UserDetailComponent, DetailItemComponent],\r\n    entryComponents: [UserFormComponent],\r\n    imports: [\r\n        CommonModule,\r\n        SharedModule,\r\n        FuseSharedModule,\r\n        UserRoutingModule,\r\n        MaterialModule\r\n    ],\r\n})\r\nexport class UserModule {}\r\n","import { BaseComponent } from \"@shared/components/base/base.component\";\r\nimport { CONFIG } from \"@config/index\";\r\nimport {\r\n    Component,\r\n    OnInit,\r\n    ViewEncapsulation,\r\n    ViewChild,\r\n    Injector,\r\n} from \"@angular/core\";\r\nimport { fuseAnimations } from \"@fuse/animations\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { UserFormComponent } from \"../../components/user-form/user-form.component\";\r\n\r\nimport { UserService } from \"../../services/user.service\";\r\nimport { MODULES } from \"@shared/constants/app.constants\";\r\n\r\nimport { FormControl } from \"@angular/forms\";\r\nimport { User } from \"@feature/entitlement/models/user.model\";\r\nimport { Role } from \"@feature/entitlement/models/role.model\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { MatPaginator } from \"@angular/material/paginator\";\r\nimport { MatSort } from \"@angular/material/sort\";\r\nimport {\r\n    camelToSentenceCase,\r\n    camelToSnakeCaseText,\r\n    snakeToCamelObject,\r\n    removeRandom,\r\n} from \"@shared/helpers/global.helper\";\r\nimport {\r\n    ConfirmDialogModel,\r\n    ConfirmDialogComponent,\r\n} from \"@shared/components/confirm-dialog/confirm-dialog.component\";\r\nimport { UserDetailComponent } from \"../../components/user-detail/user-detail.component\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { MESSAGES } from \"@shared/constants/messages.constant\";\r\n\r\n@Component({\r\n    selector: \"app-user\",\r\n    templateUrl: \"./user.component.html\",\r\n    styleUrls: [\"./user.component.scss\"],\r\n    animations: fuseAnimations,\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class UserComponent extends BaseComponent implements OnInit {\r\n    dialogRef: any;\r\n    users: User[];\r\n    roles: Role[];\r\n    userPermissions: any[];\r\n    pageSize: number = CONFIG.PAGE_SIZE;\r\n    pageSizeOptions: Array<number> = CONFIG.PAGE_SIZE_OPTIONS;\r\n    nationalities: any[];\r\n    displayedColumns = [\"firstName\", \"lastName\", \"email\", \"status\", \"actions\"];\r\n\r\n    dataSource: MatTableDataSource<any> = new MatTableDataSource<any>();\r\n\r\n    @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n    @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n\r\n    constructor(\r\n        public _matDialog: MatDialog,\r\n        private _service: UserService,\r\n        injector: Injector\r\n    ) {\r\n        super(injector, MODULES.USER_MANAGEMENT);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getData();\r\n        // super.ngOnInit();\r\n    }\r\n\r\n    getData() {\r\n        this._service\r\n            .forkUserData()\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    [this.users, this.roles, this.nationalities] = response;\r\n                    this.updateGrid(this.users);\r\n                },\r\n                (response) => super.onError(response)\r\n            );\r\n    }\r\n\r\n    camelToSnakeCase(text) {\r\n        return camelToSnakeCaseText(text);\r\n    }\r\n    openDialog(data): void {\r\n        var _this = this;\r\n        this.dialogRef = this._matDialog\r\n            .open(UserFormComponent, {\r\n                data: {\r\n                    nationalities: this.nationalities,\r\n                    roles: this.roles,\r\n                    user:\r\n                        data && data.id ? snakeToCamelObject(data) : new User(),\r\n                },\r\n                disableClose: true,\r\n                hasBackdrop: true,\r\n                panelClass: \"app-user-form\",\r\n            })\r\n            .componentInstance.sendResponse.subscribe((response) => {\r\n                if (response.id) {\r\n                    _this.editUser(response);\r\n                } else {\r\n                    _this.createUser(response);\r\n                }\r\n            });\r\n    }\r\n    onDetail(id): void {\r\n        this._service\r\n            .getUserById(id)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    this.openUserDetailModal(response);\r\n                },\r\n                (response) => super.onError(response)\r\n            );\r\n    }\r\n    openUserDetailModal(response) {\r\n        response.modules = this._service.mapModules(response.modules);\r\n        response = snakeToCamelObject(response);\r\n        this.dialogRef = this._matDialog.open(UserDetailComponent, {\r\n            data: response,\r\n            panelClass: \"app-user-detail\",\r\n        });\r\n    }\r\n    camelToSentenceCase(text) {\r\n        return camelToSentenceCase(text);\r\n    }\r\n    confirmDialog(type, id): void {\r\n        const message =\r\n            type === \"invite\"\r\n                ? removeRandom(MESSAGES.RESEND_INVITE())\r\n                : removeRandom(MESSAGES.REMOVE_CONFIRMATION());\r\n        const dialogData = new ConfirmDialogModel(\"Confirm Action\", message);\r\n        const dialogRef = this._matDialog.open(ConfirmDialogComponent, {\r\n            data: dialogData,\r\n            disableClose: true,\r\n            panelClass: \"app-confirm-dialog\",\r\n            hasBackdrop: true,\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((status) => {\r\n            if (status) {\r\n                type === \"invite\"\r\n                    ? this.resendInvitation(id)\r\n                    : this.deleteUser(id);\r\n            }\r\n        });\r\n    }\r\n    resendInvitation(id) {\r\n        this._service\r\n            .resendInvite(id)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    this.errorType = \"success\";\r\n                    this.responseMessage = MESSAGES.INVITE_RESENT();\r\n                    this.hideMessage();\r\n                },\r\n                (response) => super.onError(response)\r\n            );\r\n    }\r\n    createUser(model: User) {\r\n        this._service\r\n            .createUser(model)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    const data = this.dataSource.data;\r\n                    data.unshift(response);\r\n                    this.updateGrid(data);\r\n                    this.errorType = \"success\";\r\n                    this.responseMessage = MESSAGES.CREATED(\"User\");\r\n                    this._matDialog.closeAll();\r\n                    this.hideMessage();\r\n                    this._errorEmitService.emit(\"\", \"\");\r\n                },\r\n                ({ error }) => {\r\n                    if (error.statusCode == 422) {\r\n                        this._errorEmitService.emit(MESSAGES.EXISTS(\"User with this email\"), \"warning\");\r\n                    } else {\r\n                        this._errorEmitService.emit(MESSAGES.UNKNOWN(), \"error\");\r\n                    }\r\n                }\r\n            );\r\n    }\r\n    hideMessage() {\r\n        setTimeout(() => {\r\n            this.responseMessage = \"\";\r\n        }, 2000);\r\n    }\r\n    editUser(model: User) {\r\n        this._service\r\n            .editUser(model.id, model)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    this.errorType = \"success\";\r\n                    this.responseMessage = MESSAGES.UPDATED(\"User\");\r\n                    const index = this.dataSource.data.findIndex(\r\n                        (x) => x.id == model.id\r\n                    );\r\n                    this.hideMessage();\r\n                    this.users[index] = response;\r\n                    this.updateGrid(this.users);\r\n                    this._matDialog.closeAll();\r\n                    this._errorEmitService.emit(\"\", \"\");\r\n                },\r\n                (response) => {\r\n                    this._errorEmitService.emit(MESSAGES.UNKNOWN(), \"error\");\r\n                }\r\n            );\r\n    }\r\n    deleteUser(id: string) {\r\n        this._service\r\n            .deleteUser(id)\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(\r\n                (response) => {\r\n                    const index = this.dataSource.data.findIndex(\r\n                        (x) => x.id == id\r\n                    );\r\n                    this.users.splice(index, 1);\r\n                    this.updateGrid(this.users);\r\n                    this.errorType = \"success\";\r\n                    // this.hideMessage();\r\n                    this.responseMessage = MESSAGES.DELETED(\"User\");\r\n                },\r\n                (response) => super.onError(response)\r\n            );\r\n    }\r\n    updateGrid(data) {\r\n        this.dataSource.data = data;\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n    }\r\n}\r\n","<div   class=\"page-container page-layout carded fullwidth inner-scroll\">\r\n\r\n    <!-- TOP BACKGROUND -->\r\n    <div class=\"top-bg accent\"></div>\r\n    <!-- / TOP BACKGROUND -->\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\">\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayout.gt-sm=\"row\" fxLayoutAlign.gt-sm=\"space-between center\">\r\n\r\n            <!-- APP TITLE -->\r\n            <div class=\"logo mb-24 mb-md-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\" >\r\n                <mat-icon class=\"logo-icon s-32 mr-16\" [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\r\n                    people\r\n                </mat-icon>\r\n                <span class=\"logo-text h1\" [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\r\n                    Users\r\n                </span>\r\n            </div>\r\n            <!-- / APP TITLE -->\r\n\r\n            <!-- SEARCH -->\r\n            <div class=\"search-wrapper mx-32 mx-md-0\" >\r\n                <div class=\"search\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                    <mat-icon>search</mat-icon>\r\n                    <input  placeholder=\"Search for a user\">\r\n                </div>\r\n            </div>\r\n            <!-- / SEARCH -->\r\n\r\n            <!-- ADD BUTTON -->\r\n            <button  mat-raised-button color=\"accent\" (click)=\"openDialog(null)\" class=\"add-product-button fuse-white mt-24 mt-md-0\">\r\n                <span>ADD NEW USER</span>\r\n            </button>\r\n            <!-- / ADD BUTTON -->\r\n\r\n        </div>\r\n        <!-- / HEADER -->\r\n\r\n        <!-- CONTENT CARD -->\r\n        <div class=\"content-card\" fusePerfectScrollbar>\r\n            <!-- <div class=\"spinner-container\" *ngIf=\"dataSource.loading$ | async\">\r\n                <mat-spinner></mat-spinner>\r\n            </div> -->\r\n            <app-message-box [type]=\"errorType\" [message]=\"responseMessage\"></app-message-box>\r\n            <mat-table #table matSort matSortActive=\"username\" matSortDirection=\"asc\" matSortDisableClear [dataSource]=\"dataSource\">\r\n                <!-- COLUMNS AND ROWS-->\r\n                <ng-container *ngFor=\"let key of displayedColumns\" [matColumnDef]=\"key\">\r\n                    <mat-header-cell *matHeaderCellDef>{{ key.includes('action') ? 'Action' : camelToSentenceCase(key) }}</mat-header-cell>\r\n            \r\n                    <mat-cell *matCellDef=\"let element; let i = dataIndex\" >\r\n                       \r\n                        <span *ngIf=\"!key.includes('action'); else action\">\r\n                            <span *ngIf=\"element[camelToSnakeCase(key)]; else defaultText\">\r\n                                <ng-container  *ngIf=\"camelToSnakeCase(key).indexOf('created')<0; else date \"  >\r\n                                    {{element[camelToSnakeCase(key)]}}\r\n                                </ng-container>\r\n                            \r\n                            </span>\r\n                        </span>\r\n                        \r\n                        <ng-template #defaultText>\r\n                            <app-default-text></app-default-text>\r\n                        </ng-template>\r\n                        \r\n                        <ng-template #action>\r\n                            <mat-icon appPermission [permissions]=\"userPermissions\" matTooltip=\"Delete user\" [type]=\"'delete'\" color=\"warn\" type=\"button\" (click)=\" confirmDialog('delete',element['id'])\">delete</mat-icon> &nbsp;&nbsp;\r\n                            <mat-icon type=\"button\" (click)=\"openDialog(element)\" matTooltip=\"Delete user\">mode_edit</mat-icon> &nbsp;&nbsp;\r\n                            <mat-icon type=\"button\" (click)=\"onDetail(element['id'])\" matTooltip=\"Explore\">explore</mat-icon>\r\n                            <mat-icon  *ngIf=\"element['status']==='PENDING'\"  color=\"success\"  matTooltip=\"Resend Invitation\" type=\"button\" (click)=\" confirmDialog('invite',element['id'])\">near_me</mat-icon> &nbsp;&nbsp;\r\n                        </ng-template>\r\n                        <ng-template #date>\r\n                            {{element[camelToSnakeCase(key)] | date:'mediumDate'}}\r\n                        </ng-template>\r\n                        \r\n                    </mat-cell>\r\n                </ng-container>\r\n                <!-- -->\r\n                <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [@animate]=\"{value:'*',params:{y:'100%'}}\">\r\n                </mat-row>\r\n            \r\n            </mat-table>\r\n            <mat-paginator #paginator [pageIndex]=\"0\" [pageSize]=\"pageSize\" showFirstLastButtons [pageSizeOptions]=\"pageSizeOptions\"></mat-paginator>\r\n        </div>\r\n        <!-- / CONTENT CARD -->\r\n    </div>\r\n    <!-- / CENTER -->\r\n</div>","export class BaseModel {\r\n    id: string;\r\n    status: string;\r\n\r\n    created_on?: Date=new Date();\r\n    updated_on?:  Date=new Date();;\r\n    created_by?: string;\r\n    updated_by?: string;\r\n}\r\n\r\n\r\n"]}